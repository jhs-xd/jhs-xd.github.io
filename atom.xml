<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hang&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-28T17:39:56.278Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Si Jinhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>换电脑后</title>
    <link href="http://yoursite.com/2019/08/29/%E6%8D%A2%E7%94%B5%E8%84%91%E5%90%8E/"/>
    <id>http://yoursite.com/2019/08/29/换电脑后/</id>
    <published>2019-08-28T17:03:44.700Z</published>
    <updated>2019-08-28T17:39:56.278Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">Variety is the spice of life.<br><img src="/myimages/23.jpg" alt></blockquote></p><a id="more"></a><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="320" height="86" src="//music.163.com/outchain/player?type=2&id=28587850&auto=1&height=66"></iframe><hr><h1 id="换电脑带来的问题"><a href="#换电脑带来的问题" class="headerlink" title="换电脑带来的问题"></a>换电脑带来的问题</h1><ol><li><p>博客Post时间和博客顺序无法还原</p><p> 由于是通过拷贝的方式备份的原来的Blog文件夹，在新电脑上安装完hexo和node.js等环境后， <code>hexo g</code> ——&gt; <code>hexo d</code> 重新推送之前的博客内容后，系统判断每一篇博客的Post时间都是当前时间，所以博客的顺序就是随机的，即无法还原之前正确的博客顺序。</p></li><li><p>少备份了两篇博客</p><p> 备份时间不是最后一次推送之后，少备份了两篇，于是照着服务端的博客样式把漏掉的两篇重新敲了一遍，浪费了较长时间。</p></li></ol><hr><h1 id="换电脑后继续写hexo博客的方法"><a href="#换电脑后继续写hexo博客的方法" class="headerlink" title="换电脑后继续写hexo博客的方法"></a>换电脑后继续写hexo博客的方法</h1><h2 id="方法一：源文件拷贝"><a href="#方法一：源文件拷贝" class="headerlink" title="方法一：源文件拷贝"></a>方法一：源文件拷贝</h2><p>容易想到，但弊端明显，如上所述。<br>具体操作步骤可参考<a href="https://www.cnblogs.com/study-everyday/p/8902136.html" target="_blank" rel="noopener">这篇博文</a>，我就照着这个操作的，不建议这个方法。</p><h2 id="方法二：GitHub管理（推荐）"><a href="#方法二：GitHub管理（推荐）" class="headerlink" title="方法二：GitHub管理（推荐）"></a>方法二：GitHub管理（推荐）</h2><ol><li>解决方案：<br>在github上已经生成的<strong>hexo静态代码</strong>处建立另一个分支，利用这个分支来管理自己<strong>hexo的源文件</strong></li><li>操作步骤：<br>参考<a href="https://blog.csdn.net/heimu24/article/details/81210640" target="_blank" rel="noopener">这篇博文</a>。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;Variety is the spice of life.&lt;br&gt;&lt;img src=&quot;/myimages/23.jpg&quot; alt&gt;&lt;/blockquote&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="hello hexo" scheme="http://yoursite.com/categories/hello-hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>基于VirtualBox虚拟机安装Ubuntu</title>
    <link href="http://yoursite.com/2019/08/29/%E5%9F%BA%E4%BA%8EVirtualBox%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85Ubuntu/"/>
    <id>http://yoursite.com/2019/08/29/基于VirtualBox虚拟机安装Ubuntu/</id>
    <published>2019-08-28T16:56:47.191Z</published>
    <updated>2019-08-28T16:04:35.096Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">Variety is the spice of life.<br><img src="/myimages/21.jpg" alt></blockquote></p><a id="more"></a><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="320" height="86" src="//music.163.com/outchain/player?type=2&id=1873672&auto=1&height=66"></iframe><hr><h1 id="安装VirtualBox"><a href="#安装VirtualBox" class="headerlink" title="安装VirtualBox"></a>安装VirtualBox</h1><ol><li><a href="https://www.virtualbox.org/wiki/Downloads/" target="_blank" rel="noopener">VirtualBox官网</a>下载安装之，默认设置即可</li><li>运行VirtualBox,Ctrl+G打开全局设定，自行设置默认虚拟电脑位置、语言等选项</li><li><p>同样在官网下载安装VirtualBox扩展包，在全局设定的“扩展”选项中添加扩展包，扩展包名称为<code>Oracle VM VirtualBox Extension Pack</code></p><ul><li>扩展包用于支持USB 2.0和USB 3.0设备，VirtualBox RDP，磁盘加密，NVMe和PXE启动英特尔卡</li><li>一般安装的扩展包版本应该与VirtualBox版本相同</li></ul></li></ol><hr><h1 id="安装Ubuntu"><a href="#安装Ubuntu" class="headerlink" title="安装Ubuntu"></a>安装Ubuntu</h1><h2 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h2><ol><li><p>运行VirtualBox，新建一个虚拟机</p><ul><li>虚拟机名称随意</li><li>操作系统类型选择Linux</li><li>版本选择Ubuntu（64-bit）</li></ul></li><li><p>设置内存大小</p><ul><li>此内存为虚拟机所占的系统内存</li><li>一般设置不超过主机系统内存的1/2</li></ul></li><li><p>创建虚拟硬盘</p><ul><li>按照提示选择“现在创建虚拟硬盘”</li><li>虚拟硬盘文件类型选择为默认的“VDI(VirtualBox 磁盘映像)”</li><li>选择“动态分配”的虚拟硬盘分配方式</li><li>设置虚拟硬盘文件的名称、位置和虚拟硬盘的大小</li></ul></li><li>点击“创建”即创建了一台虚拟机，相当于一个没有安装操作系统的电脑主机</li></ol><h2 id="在虚拟机上安装Ubuntu操作系统"><a href="#在虚拟机上安装Ubuntu操作系统" class="headerlink" title="在虚拟机上安装Ubuntu操作系统"></a>在虚拟机上安装Ubuntu操作系统</h2><ol><li><a href="https://www.ubuntu.com/download/desktop/" target="_blank" rel="noopener">Ubuntu官网</a>下载桌面版系统“Ubuntu Desktop”，点击ReleaseNotes，选择Ubuntu Desktop and Server类型的版本，当前最新版本为<code>Ubuntu 18.04.2 LTS</code></li><li>在VirtualBox中启动创建好的虚拟机，弹出“选择启动盘”对话框，选择下载好的虚拟光盘<code>ubuntu-18.04.2-desktop-amd64.iso</code>，点击“启动”即可进入操作系统安装界面</li><li>按照提示设置安装Ubuntu，可能持续几十分钟</li><li>安装完毕后，重启Ubuntu</li></ol><h2 id="安装VirtualBox增强功能"><a href="#安装VirtualBox增强功能" class="headerlink" title="安装VirtualBox增强功能"></a>安装VirtualBox增强功能</h2><p>安装VirtualBox增强功能可以实现：共享文件夹、粘贴板以及鼠标无缝移动等。<br>安装步骤：</p><pre><code>- 进入Ubuntu操作系统，在上方“设备”选项卡中选择“安装增强功能”，此时桌面出现一个光盘图标- Ctrl+Alt+T打开终端，逐步输入如下命令    - cd /media/    - ls    - cd 上面一行的内容（是你设置的虚拟硬盘的名称）    - ls    - cd 上面一行的内容（VBOXADDITIONS_版本号）    - ls    - sudo ./VBoxLinuxAddionions.run- 按照提示输入安装Ubuntu系统时设置的密码回车即可（密码输入是隐式的）</code></pre><h1 id="配置Ubuntu"><a href="#配置Ubuntu" class="headerlink" title="配置Ubuntu"></a>配置Ubuntu</h1><h2 id="设置服务器镜像源"><a href="#设置服务器镜像源" class="headerlink" title="设置服务器镜像源"></a>设置服务器镜像源</h2><pre><code>目的：将默认的服务器更改为获取资源最快的国内服务器    - 打开“软件和更新”    - 选择下载服务器    - 选择最佳服务器，授权    - 关闭“软件和更新”，重新载入可用软件包列表</code></pre><h2 id="apt终端命令"><a href="#apt终端命令" class="headerlink" title="apt终端命令"></a>apt终端命令</h2><p>apt（Advanced Packaging Tool）是Ubuntu的安装包管理工具。</p><ol><li><p>更新可用软件包列表</p><pre><code>sudo apt-get update</code></pre></li><li><p>更新已安装的包</p><pre><code>sudo apt-get upgrade</code></pre></li><li><p>安装软件</p><pre><code>sudo apt install XXX安装Google浏览器：- 从https://www.google.com/chrome/?platform=linux下载安装文件- sudo apt install libappindicator1 libindicator7- sudo dpkg -i XXX.deb- sudo apt -f install安装搜狗输入法：- 在系统设置的语言支持中将“键盘输入法系统”修改为fcitx- 访问http://pinyin.sougou.com/linux/下载安装文件- 在终端输入 sudo dpkg -i XXX.deb; sudo apt -f install</code></pre></li><li><p>卸载软件</p><pre><code>sudo apt remove XXX</code></pre></li><li><p>查找软件</p><pre><code>apt-cache search XXX</code></pre></li></ol><h2 id="deb格式的安装包"><a href="#deb格式的安装包" class="headerlink" title="deb格式的安装包"></a>deb格式的安装包</h2><p>deb是Debian Linux的安装格式，在Ubuntu中同样可以使用。</p><pre><code>sudo dpkg -i XXX.deb</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;Variety is the spice of life.&lt;br&gt;&lt;img src=&quot;/myimages/21.jpg&quot; alt&gt;&lt;/blockquote&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="VirtualBox" scheme="http://yoursite.com/tags/VirtualBox/"/>
    
      <category term="Ubuntu" scheme="http://yoursite.com/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Linux操作系统</title>
    <link href="http://yoursite.com/2019/08/29/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yoursite.com/2019/08/29/Linux操作系统/</id>
    <published>2019-08-28T16:56:47.190Z</published>
    <updated>2019-08-28T16:32:12.334Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">Variety is the spice of life.<br><img src="/myimages/22.jpg" alt></blockquote></p><a id="more"></a><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="320" height="86" src="//music.163.com/outchain/player?type=2&id=1318582717&auto=1&height=66"></iframe><hr><h1 id="什么是操作系统"><a href="#什么是操作系统" class="headerlink" title="什么是操作系统"></a>什么是操作系统</h1><ol><li>操作系统是计算机硬件与用户之间沟通的纽带<ul><li>没有安装操作系统的计算机被称为裸机</li><li>在裸机上只能用机器语言编写程序</li><li>计算机安装操作系统后，就可以在操作系统上安装支持的高级语言环境，使用高级语言开发程序</li></ul></li><li>操作系统的作用<ul><li>直接操作计算机硬件</li><li>把操作硬件的代码封装为系统调用，以供应用软件的开发</li></ul></li></ol><hr><h1 id="操作系统分类"><a href="#操作系统分类" class="headerlink" title="操作系统分类"></a>操作系统分类</h1><p>根据应用领域的不同，主流操作系统可分为以下四类：</p><ul><li>桌面操作系统</li><li>服务器操作系统</li><li>嵌入式操作系统</li><li>移动设备操作系统</li></ul><h2 id="桌面操作系统"><a href="#桌面操作系统" class="headerlink" title="桌面操作系统"></a>桌面操作系统</h2><ol><li><strong>Windows</strong><ul><li>用户群体大</li><li>应用软件多</li><li>安全性、稳定性较差</li></ul></li><li>macOS<ul><li>基于Unix</li><li>更安全、稳定</li><li>适合开发人员</li></ul></li><li>Linux<ul><li>应用软件少</li><li>用户群体小</li></ul></li></ol><h2 id="服务器操作系统"><a href="#服务器操作系统" class="headerlink" title="服务器操作系统"></a>服务器操作系统</h2><p>服务器的维护：通过SSH客户端软件登录服务器实现远程维护</p><ol><li><strong>Linux</strong><ul><li>安全、稳定、免费</li><li>配套服务器软件更齐全</li><li>占有率高</li></ul></li><li>Windows Server<ul><li>付费</li><li>占有率低</li></ul></li></ol><h2 id="嵌入式操作系统"><a href="#嵌入式操作系统" class="headerlink" title="嵌入式操作系统"></a>嵌入式操作系统</h2><p>嵌入式开发：智能硬件开发</p><ol><li><strong>Linux</strong><ul><li>开源、免费</li><li>内核小</li><li>开发商可自行定制</li></ul></li></ol><h2 id="移动设别操作系统"><a href="#移动设别操作系统" class="headerlink" title="移动设别操作系统"></a>移动设别操作系统</h2><p>移动设备：智能手机、平板（也属于嵌入式系统）</p><ol><li>iOS</li><li>Android（基于Linux）</li></ol><hr><h1 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h1><p>虚拟机指通过软件模拟的具有完整硬件系统功能的、运行在一个完全隔离环境中的完整计算机系统。</p><pre><code>- 虚拟系统通过生成现有操作系统的全新虚拟镜像，具有与真实操作系统完全相同的功能- 进入虚拟系统后，所有操作都是在这个全新的独立的虚拟系统中进行，可以独立安装运行软件、保存数据，不会对真实的操作系统产生任何影响- 可以真实操作系统和虚拟系统之间的灵活切换</code></pre><p>通过在虚拟机中安装各种操作系统和软件，可以安全、方便地学习新的操作系统和软件。</p><hr><h1 id="Linux内核及发行版本"><a href="#Linux内核及发行版本" class="headerlink" title="Linux内核及发行版本"></a>Linux内核及发行版本</h1><ol><li><p>Linux内核版本<br>内核程序是系统的心脏，用来管理硬件设备、提供系统调用，在硬件和应用程序之间提供了一个抽象层。</p><p> Linux内核版本中调用关系：终端命令——&gt;系统调用——&gt;硬件设备</p></li><li><p>Linux发行版本</p><p> （1）Linux发行版本中除了Linux内核，通常包含了：</p><ul><li>桌面环境</li><li>办公套件</li><li>媒体播放器</li><li><p>数据库等应用软件</p><p>（2）常见的Linux发行版本：</p></li><li>Ubuntu</li><li>Redhat</li><li>Fedora</li><li>Debian</li><li>openSUSE</li><li>CentOS</li><li>Linux Mint</li><li>Manjaro</li><li>Mageia</li><li>Arch</li></ul></li></ol><hr><h1 id="常用Linux终端命令"><a href="#常用Linux终端命令" class="headerlink" title="常用Linux终端命令"></a>常用Linux终端命令</h1><h2 id="学习Linux终端命令的原因"><a href="#学习Linux终端命令的原因" class="headerlink" title="学习Linux终端命令的原因"></a>学习Linux终端命令的原因</h2><ul><li>Linux刚面世的时候没有图形界面，所有操作全靠终端命令完成，如磁盘操作、文件存取、进程管理等</li><li>服务器维护都是通过SSH客户端远程实现，而SSH客户端没有图形界面</li><li>Linux发行版本的终端命令有200余个，但是常用的仅10多个</li><li><h2 id="常用Linux终端命令-1"><a href="#常用Linux终端命令-1" class="headerlink" title="常用Linux终端命令"></a>常用Linux终端命令</h2></li></ul><ol><li>终端快捷键：<ul><li>打开终端：Ctrl+Alt+T</li><li>增大字号：Ctrl+Shift+=</li><li>减小字号：Ctrl+-</li><li>Tab ：自动补全（按两下，提示可能存在的命令）</li></ul></li><li><p>7个常用命令：</p><pre><code>序号  命令        对应英文                作用1    ls           list                 查看当前文件夹下的内容     ls -a                             显示指定目录下所有子目录与文件，包括隐藏文件     ls -l                             以列表的方式显示文件的详细信息     ls -lh                            以人性化的方式显示文件大小2    cd [目录名]   change directory     切换文件夹     cd                                回到当前账户的主目录（/home/用户目录）     cd ~                              回到当前账户的主目录     cd .                              保持当前目录     cd ..                             切换到上级目录     cd -                              在最近两次工作目录之间来回切换3    pwd          print work directory 查看当前文件夹4    mkdir [目录名] make directory      创建文件夹     mkdir -p [递归目录]                可以递归创建目录5    touch [文件名] touch               如果文件不存在，新建文件；如果文件存在，更新文件的末次修改日期6    rm[文件名]    remove               删除指定名称的文件（删除后不可恢复）     rm -r [文件夹名]                   删除指定名称的文件夹     rm -f [文件名]                     强制删除，忽略不存在的文件7    clear        clear                清屏</code></pre></li><li><p>查阅终端命令的帮助信息：</p><pre><code>方式一：command --help ：查看帮助信息    方式二：man command    ：查阅详细手册    - 按 Enter   ：一行行显示    - 按 Space/f ：下一屏    - 按 b       ：上一屏    - 按 q       ：退出</code></pre></li><li><p>Linux下文件和目录的特点：</p><pre><code>- Linux文件或目录名称最长可以有256个字符- 以 . 开头的文件为隐藏文件，需要用 -a 参数才能显示-  . 代表当前目录-  .. 代表上一级目录-  相对路径：输入路径时，最前面不是 / 或者 ~ ，表示相对当前目录的目录位置-  绝对路径：输入路径时，最前面是 / 或者 ~ ，表示从根目录或家目录开始的具体目录位置</code></pre></li><li><p>其他终端命令：</p><pre><code>  1 tree [目录名]        以树状图列出文件目录结构tree -d         只显示目录  2 cp 源文件 目标文件    复制文件或目录        cp -f           强制复制，已经存在的目标文件直接覆盖，不提示        cp -i           覆盖文件前提示        cp -r           复制文件夹，若给出的源文件是目录文件才执行cp，将递归复制该目录下的所有子目录和文件，目标文件必须是一个目录名  3 mv 源文件 目标文件    移动文件或目录/文件或目录重命名        mv -i           覆盖文件前提示  4 cat [文件名]         查看文件内容、创建文件、文件合并、追加文件内容等        cat -b          对非空输出行编号（与 nl 命令等价）        cat -n          对输出的所有行编号  5 more [文件名]        分屏显示文件内容      * cat 与 more 的区别：        cat 一次显示所有内容，适合查看内容较少的文本文件  6 grep “搜索文本文件内容” 搜索文本文件名        grep -n         显示匹配行及行号        grep -v         显示不包含匹配文本的所有行（求反）        grep -i         忽略大小写      * 常用的两种模式的查找：        ^a     ：行首，查找以 a 开头的行        ke$    ：行尾，查找以 ke 结束的行  7 echo 文字内容        在终端中显示参数指定的文字，通常和重定向联合使用      * 重定向之 &gt; 和 &gt;&gt; 的区别：        &gt;  表示输出，会覆盖原有文件的内容        &gt;&gt; 表示追加，会将内容追加到已有文件内容的末尾      * echo 与 touch 的区别：        echo 在创建文件的同时，也指定的文件的内容（echo hello &gt; a.txt）        touch 只能创建一个空的文件  8 管道 |    - Linux 允许将一个命令的输出通过 管道 作为另一个命令的输入    - 命令1（写） |  命令2（读）    - 常用的管道命令有：        more：分屏显示内容        grep：在命令执行结果的基础上查询指定的文本</code></pre></li><li><p>远程管理常用命令</p><pre><code>1 关机                shutdown 时间（now：立刻关机；不指定时间，默认1分钟后关机；20:30：八点半关机；+10:10分钟后关机）  取消关机             shutdown -c  重启                shutdown -r 时间2 查看或配置网卡信息    ifconfig  * 查看网卡对应的IP地址    ifconfig | grep inet  * 127.0.0.1 被称为本地回环地址，一般用来测试本机网卡是否正常3 检测到目标IP地址的连接是否正常    ping4 远程登录和复制文件  * 远程登录           ssh [-p 端口号] 用户名@IP      * 远程复制文件        scp [-P（大写） 端口号] [-r] 用户名@IP:文件名或路径 用户名@IP:文件名或路径</code></pre></li><li><p>SSH基础</p><p> （1）在Linux中SSH是非常常用的工具，通过SSH客户端可以连接到运行了SSH服务端的远程机器上。</p><pre><code>- SSH客户端是一种使用 Secure Shell（SSH）协议连接到远程计算机的软件程序- SSH目前比较可靠，专为远程登录会话和其他网络服务提供安全性的协议    - 利用SSH协议可以有效防止远程管理过程中的信息泄露    - 通过SSH协议可以对所有传输的数据进行加密，也能够防止DNS欺骗和IP欺骗- SSH的另一项优点是传输的数据可以是经过压缩的，可以加快传输速度- SSH 服务的默认端口号：22    1）常见服务默认端口号：       Web 服务        80       HTTPS          443       FTP 服务        21    2）实际应用中，SSH 服务的端口号很有可能不是默认的22，这是需要使用 -p 选项指定正确的端口号，否则无法正常连接服务器</code></pre><p> （2）SSH 这个终端命令只能在Linux或Unix系统下使用，如果在Windows系统中，可以安装 <a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html" target="_blank" rel="noopener">PuTTY</a> 或者 <a href="https://xshell.en.softonic.com/" target="_blank" rel="noopener">XShell</a> 客户端软件即可</p><pre><code>在Windows客户端使用 ssh 服务远程登录Linux服务器的步骤：1）在Windows客户端安装 XShell 或者 Putty2）在Linux远程系统上安装 ssh 服务，并查看是否安装成功：    sudo apt-get install openssh-server    ssh -V3）启动 ssh ，并查看是否启动成功：    /etc/init.d/ssh start    ps -e | grep ssh4）注意，若远程Linux系统在虚拟机上，首先要设置虚拟机网络连接方式为“桥接网卡”，   这样虚拟机才会被看作与主机在同一局域网段中的独立的机器，才能与主机网络互相ping通。5）检查Windows主机与Linux虚拟机之间能否互相ping通6）若虚拟机无法ping通主机，大概率是Windows防火墙的阻止   此时需要在Windows防火墙设置中，在“入站规则”里找到配置文件类型为“公用”的“文件和打印共享（回显请求–ICMPv4-In）”规则，设置为允许7）在Windows客户端打开XShell，新建会话，在“主机”选项中填入Linux服务端的IP地址，并根据提示填写Linux系统的用户名和密码即可登录到远程Linux服务器</code></pre><p> （3）SSH 免密码登录</p><pre><code>1）配置公钥：  在客户端执行 ssh-keygen 即可生成 ssh 秘钥（包含公钥id_rsa.pub和私钥id_rsa），回车三次即可2）上传公钥到远程服务器端的 .ssh 文件夹下：  在客户端执行 ssh-copy-id [-p port] 用户名@服务端IP，即可让远程服务器记住公钥（服务器生成 authorized_keys，内容即公钥id_rsa.pub）</code></pre><p> （4）配置 ssh 远程登录的别名</p><pre><code>1）每次输入 ssh [-p 端口号] 用户名@IP 过于麻烦，可以在客户端 ~/.ssh/ 文件夹下创建 config 文件2）config 文件内容如下：    Host 别名        HostName 远程服务器IP        User     远程服务器用户名        Port     SSH服务端的端口号3）保存之后，即可使用“ssh 别名”实现远程登录，也可以使用“scp 本地文件地址 别名 远程服务器地址”将指定文件远程复制到服务器端</code></pre></li><li><p>scp命令</p><ul><li>scp 用来在Linux下进行远程文件拷贝</li><li>scp 命令的地址格式与 ssh 相同，在指定端口号时需使用大写-P</li><li><p>示例：</p><pre><code>1 把本地当前目录下的 1.txt 文件复制到远程家目录下的 Desktop/1.txt  scp -P port 1.txt user@remote:Desktop/1.txt2 把远程家目录下的 Desktop/1.txt 文件复制到本地当前目录下的 1.txt  scp -P port user@remote:Desktop/1.txt 1.txt</code></pre></li><li>注意：“：”后面的路径如果不是绝对路径，则以用户家目录作为参照路径</li><li>加上 -r 选项可以复制文件夹</li><li>cp 这个终端命令只能在Linux或Unix系统下使用，在Windows系统中可以安装 PuTTY 使用 pscp 命令行工具或者安装 <a href="https://filezilla-project.org" target="_blank" rel="noopener">FileZilla</a> 或 <a href="https://www.netsarang.com/zh/all-downloads/?code=622" target="_blank" rel="noopener">Xftp</a> 使用 FTP 进行文件传输</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;Variety is the spice of life.&lt;br&gt;&lt;img src=&quot;/myimages/22.jpg&quot; alt&gt;&lt;/blockquote&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="操作系统" scheme="http://yoursite.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络</title>
    <link href="http://yoursite.com/2019/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <id>http://yoursite.com/2019/08/29/计算机网络/</id>
    <published>2019-08-28T16:34:15.756Z</published>
    <updated>2019-04-10T13:54:03.885Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">Genius only means hard-working all one’s life. ——Mendeleyev<br><img src="/myimages/16.jpg" alt></blockquote></p><a id="more"></a><hr><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><ol><li>网络（network）：若干结点和连接这些结点的链路组成（网络中结点可以是计算机、集线器、交换机、路由器）</li><li>互联网：通过路由器把网络和网络连接起来，互联网是“网络的网络”</li><li><p>因特网：世界上最大的互联网（网络把计算机连接在一起，因特网把网络连接在一起）</p><pre><code>1.因特网发展的三个阶段第一阶段：单个网络ARPANET——&gt;Internet第二阶段：建成三级结构的互联网（主干网、地区网、校园网/企业网）第三阶段：形成多层次ISP（Internet Service Provider）结构的因特网2.ISP：因特网服务提供商，ISP从因特网管理机构申请到很多IP地址，同时拥有通信线路和路由器等连网设备。3.ISP多层结构（1）根据覆盖面积和拥有IP数目的大小，ISP分为三层：主干ISP、地区ISP、本地ISP（2）主机A要和主机B通信，需要依次经过本地ISPa、地区ISPa、主干ISPa，主干ISPb、地区ISPb、本地ISPb一层层传输（3）IXP：因特网交换点，它允许两个网络直接相连并交换分组，不需要通过第三个网络转发分组4.上网：通过某个ISP获得IP，将用户主机通过ISP接入因特网5.因特网的组成（1）边缘部分：主机（2）核心部分：大量网络+路由器边缘部分利用核心部分提供的服务，使众多主机之间能够互相通信并交换、共享信息6.路由器实现分组交换（动态分配传输线路的资源），转发收到的分组分组交换采用存储转发技术，将要发送的报文划分为等长的数据包/分组7.计算机之间的通信：主机A的某个进程和主机B上的另一个进程进程通信通信方式：（1）C/S：客户服务器方式（2）P2P：对等方式</code></pre></li><li><p>“三网”：电信网络、计算机网络、有线电视网络</p></li><li>计算机网络的分类<pre><code>（1）广域网WAN（因特网的核心部分）：长距离传输数据（2）城域网MAN（3）局域网LAN：多个互联的局域网组成校园网/企业网</code></pre></li><li>计算机网络的性能指标<pre><code>（1）速率：单位bit/s（2）带宽：通信线路允许通过的信号频带范围；表示通信线路传输数据的能力，即单位时间内通信线路所能通过的“最高数据率”（3）吞吐量：单位时间内通过某个网络的数据量（受带宽限制）（4）时延：总时延=排队时延+处理时延+发送时延+传播时延，提高数据的发送速率只是减小了数据的发送时延（5）时延带宽积：表示从发送端发出但尚未到达接收端的比特（6）往返时间RTT：表示从发送方发送数据开始，到发送方收到接收方的确认，总经历的时间（7）利用率：信道利用率——某信道有百分之几的时间是被利用的            网络利用率——全网络信道利用率的加权平均值            信道或网络利用率过高会产生非常大的时延</code></pre></li><li>计算机网络的体系结构<pre><code>1.协议网络通信的规则，规则明确规定了：数据格式、同步问题（时序问题）2.体系结构计算机网络的各层及其协议的集合称为网络的体系结构3.具有五层协议的体系结构（1）OSI的七层协议OSI是由国际标准化组织制定的标准，它概念清楚，理论完善，但是复杂又不实用。    7    应用层    6    表示层    5    会话层    4    运输层    3    网络层    2    数据链路层    1    物理层（2）TCP/IP的四层协议TCP/IP体系结构得到了非常广泛的应用    4    应用层(各种应用层协议如HTTP，FTP，DNS等)    3    运输层(TCP或UDP)    2    网际层(又名网络互联层)    1    数据链路层(又名网络接口层)（3）五层协议学习网络原理时的体系结构，结合OSI和TCP/IP的优点    5    应用层（进程间通信和交互的规则，如HTTP，FTP等）    4    运输层（为进程间的通信提供通用的数据传输服务，如TCP,UDP）    3    网络层（为分组交换网上的不同主机提供通信服务，选择合适的路由，通过路由器找到目的主机，IP协议）    2    数据链路层（将IP数据报组装成帧在链路上传送，每一帧包括数据和控制信息——同步信息、地址信息、差错控制信息）    1    物理层</code></pre></li><li>数据在各层之间的传递<pre><code>（1）协议数据单元PDU计算机网络体系结构中，对等层之间交换的信息报文统称为协议数据单元（Protocol Data Unit，PDU）PDU由协议控制信息（协议头）和数据（SDU）组成（2）各层PDU的名称        应用层 —— 报文（Message）        传输层 —— 段（Segment）        网络层 —— 分组/包（Packet）        数据链路层 —— 帧（Frame）        物理层 —— 比特（Bit）（3）PDU的封装在计算机网络体系结构中，下层把上层的PDU作为本层的数据加以封装，然后增加本层的协议头部（和尾部）形成本层的PDU</code></pre></li></ol><p><img src="/myimages/16PDU数据的封装.png" alt></p><p>下图为TCP/IP协议对于PDU的封装：</p><p><img src="/myimages/16PDU封装实例.png" alt></p><hr><h1 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h1><ol><li>数据通信系统的模型<br>一个数据通信系统分为三大部分：源系统、传输系统、目的系统</li></ol><p><img src="/myimages/16数据通信系统模型.png" alt></p><pre><code>（1）源系统源点：要传输的数据发送器：源点数据要经过发送器编码（基带调制）后才能在传输系统中传输典型的发送器是调制器（2）目的系统接收器：接收传输系统传过来的信号，解调为能被目的设备处理的信息典型的接收器是解调器终点：获取传输过来的数字比特流，把信息输出</code></pre><ol start="2"><li><p>宽带接入技术<br>用户要连接到Internet，必须先连接到某个ISP，获取上网所需的IP<br>（1）初期，利用电话线通过调制解调器连接到ISP（最高速率达到56kb/s）<br>（2）如今，多种宽带接入技术</p><pre><code>1.ADSL技术（1）ADSL：非对称数字用户线，用数字技术对现有的模拟电话线进行改造，使它能够承载宽带数字业务（2）原理：在电话线的两端各安装一个ADSL调制解调器（我国采用离散多音调DMT调制技术实现）相当于在电话线上使用许多小的调制解调器并行地传送数据由于用户电话线的具体条件（距离、线径、干扰等）差别很大，所以ADSL不能保证固定的数据率ADSL采用自适应调制技术使用户线能够传送尽可能高的数据率（3）“非对称”的含义：ADSL的下行（从ISP到用户）带宽远远大于上行（从用户到ISP）带宽（4）ADSL的传输距离取决于：数据速率（速率越快传输距离越短）、电话线的线径（越细衰减越大）</code></pre></li></ol><hr><h1 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h1><ol><li>数据链路层的信道：点对点信道、广播信道</li><li>数据链路层协议的任务：<pre><code>（1）封装成帧：在一段数据的前后添加首部和尾部，构成一帧（2）透明传输：当传送的帧使用文本文件组成的帧，数据部分不会出现帧定界控制字符，不论键盘输入什么都可以在帧中传输过去，称为透明传输    字节填充法解决透明传输问题（发送端的数据链路层，在数据中出现控制字符时，需要在前面插入一个转义字符）（3）差错检测：在数据链路层才能广泛使用循环冗余检验CRC的检错技术    凡是接收端数据链路层接受的帧均无差错</code></pre></li></ol><hr><h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><ol><li>与IP协议配套的三个协议：</li></ol><ul><li>地址解析协议ARP（将网络层的IP地址解析为数据链路层的硬件地址）</li><li>网际控制报文协议ICMP</li><li>网际组管理协议IGMP</li></ul><p><img src="/myimages/16IP及其配套协议.png" alt></p><ol start="2"><li><p>IP地址<br>IP地址是给因特网上每一个主机（或路由器）的每一个接口分配一个唯一的32位的标识符</p></li><li><p>IP地址的分类如下：</p></li></ol><p><img src="/myimages/16IP地址的分类.png" alt></p><pre><code>（1）IP地址=网络号+主机号    网络号：标志主机（或路由器）所连接的网络    主机号：标志网络号范围内的主机（2）IP地址不仅指明一个主机，也指明了主机所连接的网络（3）IP地址采用点分十进制记法（4）A类地址的网络号占1个字节，主机号占3个字节    因此每一个A类网络中可指派的最大网络数为2^7-2，减2的原因：全0表示本网络，127（即01111111）保留作为本地软件环回测试本主机的进程之间的通信    最大主机数为2^24-2，减2的原因：全0代表“本主机”，全1表示该网络上的所有主机</code></pre><ol start="4"><li><p>IP地址的特点</p><pre><code>（1）每一个IP地址都由网络号和主机号两部分组成。IP地址是一种 分等级的地址结构。分两个等级的好处是：    1&gt;IP地址管理机构在分配IP地址时只分配网络号（第一级），而剩下的主机号（第二级）则由得到该网络号的单位自行分配    2&gt;路由器仅根据目的主机所连接的网络号来转发分组（而不考虑目的主机号），这样就可以使路由表中的项目数大幅度减少，    从而减小了路由表所占的存储空间以及查找路由表的时间（2）实际上IP地址是标志一个主机（或路由器）和一条链路的接口。由于一个路由器至少应当连接到两个网络，因此一个路由器至少应当有两个不同的IP地址。（3）用转发器或网桥连接起来的若干个局域网仍为一个网络，因为这些局域网都具有同样的网络号。    具有不同网络号的局域网必须使用路由器进行互连    即：    1&gt;同一个局域网上的主机或路由器的IP地址中的网络号必须一致    2&gt;路由器总是有两个或两个以上的IP地址，即路由器的每一个接口都有一个不同网络号的IP地址（4）在IP地址中，所有分配到网络号的网络（不管是范围很小的局域网，还是可能覆盖很大地理范围的广域网）都是平等的</code></pre></li><li><p>IP地址与硬件地址</p><pre><code>（1）硬件地址/物理地址/MAC地址：数据链路层和物理层使用的地址，位于MAC帧的首部（2）IP地址：网络层和以上各层使用的地址，是一种逻辑地址。位于IP数据报的首部（3）因此在数据链路层，只能看见MAC帧，不能看见IP数据报（IP地址）</code></pre></li><li><p>划分子网<br>在ARPANET的早期，IP地址的设计确实不够合理：</p><ul><li>IP地址空间的利用率有时很低</li><li>给每一个物理网络分配一个网络号会使路由表变得太大因而使网络性能变坏</li><li>两级IP地址不够灵活</li></ul><p>为解决上述问题，进行<strong>划分子网</strong>：在IP地址中又增加了一个“子网号字段＂，使两级IP地 址变成为<strong>三级IP地址</strong>（网络号+子网号+主机号）</p><p> <strong>注意：</strong>划分子网只是把IP地址的主机号这部分进行再划分，不改变网络号</p></li><li><p>子网掩码<br>标志是否对主机号进行了子网划分<br>因特网规定：所有的网络都必须有子网掩码，不划分子网时，使用各类IP对应的默认子网掩码</p></li></ol><p><img src="/myimages/16子网掩码.png" alt></p><p><strong>三级IP地址的子网掩码</strong>和数据报的<strong>目的IP地址</strong>逐位相“与”，得到子网的网络地址</p><ol start="8"><li>路由表的内容：使用子网划分后，路由表必须包含三项内容——目的网络地址、子网掩码、下一跳地址</li></ol><hr><h1 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h1><ol><li><p>网络层与传输层的区别</p><pre><code>（1）网络层为主机之间提供逻辑通信    传输层为进程之间提供端到端的逻辑通信（2）在网络层，IP数据报首部中的检验和字段， 只检验首部是否出现差错而不检查数据部分    运输层还要对收到的报文进行差错检测</code></pre></li><li><p>传输层的两个主要协议</p><pre><code>TCP：传输控制协议，面向连接UDP：用户数据报协议，无连接</code></pre></li></ol><p>使用UDP和TCP协议的各种应用和应用层协议：<br><img src="/myimages/16TCP和UDP应用.png" alt></p><ol start="3"><li><p>传输层的端口</p><pre><code>（1）把一个特定机器上运行的特定进程指明为因特网上通信最后的终点还是不可行的。    这是因为进程的创建和撤销都是动态的，通信的一方几乎无法识别对方机器上的进程。（2）为解决上述问题，引入运输层的端口。    虽然通信的终点是应用进程，但我们只要把要传送的报文交到目的主机的某一个合适的目的端口，    剩下的工作（即最后交付给目的进程）就由TCP来完成（3）TCP/IP的运输层用一个16位端口号来标志一个端口</code></pre></li><li><p>用户数据报协议UDP</p><pre><code>（1）UDP只在IP的数据报服务之上增加了很少一点的功能，这就是复用和分用的功能以及差错检测的功能（2）UDP的主要特点：    1&gt; UDP是无连接的    2&gt; UDP使用尽最大努力交付，即不保证可靠交付    3&gt; UDP是面向报文的        发送方的UDP对应用程序交下来的报文，在添加首部后就向下交付给IP层。UDP对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界。    4&gt; UDP没有拥塞控制        因此网络出现的拥塞不会使源主机的发送速率降低。    5&gt; UDP支持一对一、一对多、多对一和多对多的交互通信    6&gt; UDP的首部开销小，只有8个字节，比TCP的20个字节的首部要短（3）UDP的首部格式    首部字段由4个字段、8个字节组成，每个字段2个字节    1&gt; 源端口：在需要对方回信时选用，不需要时可用全0    2&gt; 目的端口：这在终点交付报文时必须要使用到    3&gt; 长度：UDP用户数据报的长度，其最小值是8 (仅有首部）    4&gt; 检验和：检测UDP用户数据报在传输中是否有错，有错就丢弃（首部和数据部分一起检验）</code></pre></li><li><p>传输控制协议TCP</p><pre><code>（1）TCP的主要特点：    1&gt;  TCP是面向连接的运输层协议        应用程序在使用TCP协议之前，必须先建立TCP连接；在传送数据完毕后，必须释放已经建立的TCP连接    2&gt; 每一条TCP连接只能有两个端点（一对一，点对点）    3&gt; TCP提供可靠交付的服务        通过TCP连接传送的数据，无差错、不丢失、不重复、并且按序到达    4&gt; TCP提供全双工通信        TCP允许通信双方的应用进程在任何时候都能发送数据。        TCP连接的两端都设有发送缓存和接收缓存，用来临时存放双向通信的数据    5&gt; 面向字节流        TCP把应用程序交下来的数据看成仅仅是一连串的无结构的字节流，TCP并不知道所传送的字节流的含义。（2）TCP的连接    1&gt; TCP面向连接，每条TCP连接有两个端点，端点称为套接字Socket    2&gt; 套接字Socket=IP:端口号    3&gt; 每一条TCP连接唯一地被通信两端的两个端点（即两个套接字）所确定（3）TCP可靠传输原理    通过可靠传输协议实现：    1&gt; 停止等待协议（自动重传请求ARQ）        “停止等待”就是每发送完一个分组就停止发送，等待对方的确认；在收到确认后再发送下一个分组。        a.超时重传（发送方出错）        若传输过程中出现差错，接收方不会返回确认信息，发送方超过一段时间未收到确认，就会进行“超时重传”        注意：            第一，发送方在发送完一个分组后，必须暂时保留已发送的分组的副本（为发生超时重传时使用）            第二，分组和确认分组都必须进行编号            第三，超时计时器设置的重传时间应当比数据在分组传输的平均往返时间更长一些        b.确认丢失（接收方出错）        接收方的确认丢失了，发送方就会进行超时重传，但事实上接收方已经接收到了数据        接收方需要做：        第一，丢弃这个重复的分组M2,不向上层交付        第二，向发送方重新发送确认    经过上述的确认和重传机制，就可以在不可靠的传输网络上实现可靠的通信    注意：停止等待协议信道利用率极低         为提高传输效率，采用流水线传输         流水线传输就是发送方可连续发送多个分组，不必每发完一个分组就停顿下来等待对方的确认    2&gt; 连续ARQ协议/滑动窗口协议（流水线传输）    发送方分组发送：位于窗口中的多个分组都可以连续发出去，不需要等待对方确认    接收方累积确认：接收方不必对收到的分组逐个发送确认，而是可以在收到几个分组后，对按序到达的最后一个分组发送确认</code></pre></li></ol><p>超时重传：<br><img src="/myimages/16超时重传.png" alt></p><p>确认丢失：<br><img src="/myimages/16确认丢失和确认迟到.png" alt></p><pre><code>（4）TCP的首部格式    首部占：20+4n字节，其中20个字节是固定的，4n字节根据需要增加    首部各字段：    1&gt; 源端口、目的端口    2&gt; 序号：在一个TCP连接中传送的字节流中的每一个字节都按顺序编号    3&gt; 确认号：期望收到对方下一个报文段的第一个数据字节的序号    4&gt; 数据偏移：这个字段实际上是指出TCP报文段的首部长度    5&gt; 保留：占6位，保留为今后使用，但目前应置为0    6&gt; 紧急URG：URG=1标志该报文段中包含紧急数据，应尽快发送    7&gt; 确认ACK：TCP规定，在连接建立后所有传送的报文段都必须把ACK置l    8&gt; 推送PSH    9&gt; 复位RST    10&gt; 同步SYN：建立连接时的标志。        当SYN=1而ACK=0时，表明这是一个连接请求报文段。        对方若同意建立连接，则应在响应的报文段中使SYN=1和ACK=1        因此，SYN置为1就表示这是个连接请求或连接接受报文    11&gt; 终止FIN：用来释放一个连接        当FIN=1时，表明此报文段的发送方的数据已发送完毕， 并要求释放运输连接    12&gt; 窗口：窗口指的是发送本报文段的一方的接收窗口（而不是自己的发送窗口）        窗口值作为接收方让发送方设置其发送窗口的依据    13&gt; 检验和：检验和字段检验的范围包括首部和数据这两部分    14&gt; 紧急指针：紧急指针仅在URG = 1时才有意义，它指出本报文段中的紧急数据的字节数（紧急数据结束后就是普通数据）    15&gt; 选项（5）TCP可靠传输的实现    以字节为单位的滑动窗口    超时重传    选择确认SACK（6）TCP的流量控制    让发送方的发送速率不要太快，要让接收方来得及接收    发送方的发送窗口不能超过接收方给出的接收窗口的数值（TCP的窗口单位是字节，不是报文段）（7）TCP的拥塞控制（8）TCP的运输连接管理    运输连接的三个阶段：连接建立，数据传送，连接释放</code></pre><ol start="6"><li><p>TCP“三次握手，四次挥手”<br>（1）TCP的连接建立——三次握手<br><img src="/myimages/16三次握手建立TCP连接.png" alt></p><pre><code>准备工作：1.客户主动打开连接、服务器被动打开连接2.B的TCP服务器进程先创建传输控制块TCB上，准备接受客户进程的连接请求。  然后服务器进程就处于LISTEN收听状态，等待客户的连接请求。如有，即作出响应第一次握手：A的TCP客户进程也是首先创建传输控制模块TCB,然后向B发出连接请求报文段这时首部中的同步位SYN=1，同时选择一个初始序号seq=x这时，TCP客户进程进入SYN-SENT（同步已发送）状态第二次握手：B收到连接请求报文段后，如同意建立连接，则向A发送确认。在确认报文段中应把SYN位和ACK位都置1，确认号是ack=x+1，同时也为自己选择一个初始序号seq=y这时TCP服务器进程进入SYN-RCVD（同步收到）状态第三次握手：TCP客户进程收到B的确认后，还要向B给出确认。确认报文段的ACK置1，确认号ack=y+1，而自己的序号seq=x+l这时，TCP连接已经建立，A进入ESTABLISHED（已建立连接）状态当B收到A的确认后，也进入ESTABLISHED状态第三次握手可以携带HTTP请求报文问题：为什么最后A还要在发送一次确认？答：A不想欺骗B，让服务器B一直建立着连接，等着A发送数据。事实上，A此时并没有建立连接请求。    这是由于很久之前A的连接请求在某些网络节点长时间滞留了，A在此期间重传了一次新的连接请求，完成了TCP连接和数据传输。    等到滞留的旧的连接请求抵达服务器端B，A已经释放了客户端的连接。</code></pre></li></ol><p>（2）TCP的连接释放——四次挥手<br><img src="/myimages/16四次挥手.png" alt></p><pre><code>第一次挥手：A的应用进程先向其TCP发出连接释放报文段，并停止再发送数据，主动关闭TCP连接。A把连接释放报文段首部的FIN置1,其序号seq=u这时A进入FIN-WAIT-1(终止等待1)状态，等待B的确认第二次挥手：B收到连接释放报文段后即发出确认，确认号是ack=u+1，而这个报文段自己的序号是vB就进入CLOSE-WAIT（关闭等待）状态A收到来自B的确认后，就进入FIN-WAIT-2C终止等待2)状态，等待B发出的连接释放报文段此时，TCP连接处于半关闭(half-close)状态：A到B的连接关闭，但B到A的连接仍开启。即A已经没有数据要发送了，但B若发送数据，A仍要接收第三次挥手：B发出的连接释放报文段必须使FIN=1，B还必须重复上次已发送过的确认号ack=u+1这时B就进入LAST-ACK（最后确认）状态，等待A的确认第四次挥手：A在收到B的连接释放报文段后，必须对此发出确认。在确认报文段中把ACK置1，确认号ack=w+1，而自己的序号是seq=u+lA进入到TIME-WAIT（时间等待）状态注意：现在TCP连接还没有释放掉。必须经过时间等待计时器(TIME-WAITtimer)设置的时间2MSL后，A才进入到CLOSED状态（时间MSL叫做最长报文段寿命）当A撤销相应的传输控制块TCB后，就结束了这次的TCP连接B只要收到了A发出的确认，就进入CLOSED状态同样，B在撤销相应的传输控制块TCB后，就结束了这次的TCP连接（B结束TCP连接的时间要比A早一些）</code></pre><hr><h1 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h1><ol><li>域名系统DNS<br>域名系统DNS(Domain Name System)是因特网使用的命名系统，用来把便于人们使用的机器名字转换为IP地址<br>（1）域名到IP地址的解析是由分布在因特网上的许多域名服务器程序（可简称为域名服务器）共同完成的<br>（2）DNS的分布式结构<br><strong>树状结构的DNS域名服务器</strong></li></ol><p><img src="/myimages/16树状结构的DNS域名服务器.png" alt></p><p>每一个域名服务器都只对域名体系中的一部分进行管辖</p><pre><code>根据域名服务器所起的作用，可以把域名服务器划分为以下四种不同的类型：1&gt; 根域名服务器2&gt; 顶级域名服务器TLD3&gt; 权限域名服务器4&gt; 本地域名服务器</code></pre><ol start="2"><li>万维网 WWW<br>（1）万维网是一个大规模的、联机式的信息储藏所，英文简称为Web<br>（2）万维网以客户服务器方式工作<br>客户程序向服务器程序发出请求，服务器程序向客户程序送回客户所要的万维网文档<br>（3）怎样标志分布在整个因特网上的万维网文档？<br>万维网使用<strong>统一资源定位符URL</strong>来标志万维网上的各种文档，并使每个文档在整个因特网的范围内具有唯的标识符URL<br>（4）用什么样的协议来实现万维网上各种链接？<br>万维网客户程序与万维网服务器程序之间的交互遵守<strong>超文本传送协议HTTP</strong><br>（5）怎样使不同作者创作的不同风格的万维网文档都能在因特网上的各种主机上显示出来？<br>万维网使用<strong>超文本标记语言HTML</strong>, 使得万维网页面的设计者可以很方便地用链接从本页面的某处链接到因特网上的任何个万维网页面，并且能够在自己的主机屏幕上将这些页面显示出来</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;Genius only means hard-working all one’s life. ——Mendeleyev&lt;br&gt;&lt;img src=&quot;/myimages/16.jpg&quot; alt&gt;&lt;/blockquote&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="《计算机网络》" scheme="http://yoursite.com/categories/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E3%80%8B/"/>
    
    
      <category term="Internet" scheme="http://yoursite.com/tags/Internet/"/>
    
  </entry>
  
  <entry>
    <title>由JSP引出的前后端分离架构</title>
    <link href="http://yoursite.com/2019/08/29/%E7%94%B1JSP%E5%BC%95%E5%87%BA%E7%9A%84%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E6%9E%B6%E6%9E%84/"/>
    <id>http://yoursite.com/2019/08/29/由JSP引出的前后端分离架构/</id>
    <published>2019-08-28T16:34:15.755Z</published>
    <updated>2019-04-10T13:09:40.204Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">The man with a new idea is a crank until the idea succeeds.——Mark Twain<br><img src="/myimages/8.png" alt><blockquote></blockquote></blockquote></p><a id="more"></a><hr><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>今天写了一天项目申请书，心累。<br>说说昨天在学习JSP时想到的一个问题，以及由此引发的我一连串的百度搜索…</p><blockquote><p>为什么要有JSP这么个东西？</p></blockquote><hr><h1 id="有了Servlet为什么要有JSP"><a href="#有了Servlet为什么要有JSP" class="headerlink" title="有了Servlet为什么要有JSP"></a>有了Servlet为什么要有JSP</h1><p>刚接触的时候，老师由这个问题引出了JSP<br>Servlet和JSP都属于动态web资源，都是服务器端的技术，需要启动服务器后才会执行，那它俩有啥区别呢？为什么有了Servlet为什么要有JSP？</p><pre><code>Servlet是一种运行在服务器端的java小程序，它通常通过http协议接收和响应来自web客户端的请求。有人说JSP就是Servlet，我觉得有一定道理：服务器在读到JSP代码后，根据相应的业务逻辑，编译成相应的servlet程序，再由servlet输出到页面（输出的就是html），但Servlet可能更偏向于逻辑的实现，而JSP偏向于与HTML页面相关的操作Servlet程序中还可以编写前端HTML页面：response.getWriter(&quot;HTML代码&quot;)但是用Servlet生成HTML页面有不可避免的缺点：1. 代码量大2. 每一个servlet程序都需要配置3. 要求开发人员十分了解java，不利于前后端分离，不便于页面的调试、维护老师由此引出了JSP，但后来我发现JSP并没有完全解决上面存在的问题啊1. JSP文件不需要像Servlet一样在服务器端进行配置web.xml，就能在浏览器端访问。这算解决了第二个问题2. 可是，JSP可以用来编写HTML+java+JSP代码，这些代码那么乱的结合在一起，也没有解决前后端分离的问题，相反我觉得问题更严重了</code></pre><p>到这儿问题又来了：为什么一定要做到前后端分离，有什么好处？有没有必要？</p><hr><h1 id="前后端分离的架构"><a href="#前后端分离的架构" class="headerlink" title="前后端分离的架构"></a>前后端分离的架构</h1><blockquote><p>这一部分摘自<a href="http://lidada.org/front-end-development-process-and-front-end-separation-mode/" target="_blank" rel="noopener">LIDADA博客</a></p></blockquote><h2 id="传统开发模式"><a href="#传统开发模式" class="headerlink" title="传统开发模式"></a>传统开发模式</h2><p>这种方式的特点是利用后端语言提供的模板引擎生成html页面，再经服务器返回到客户端浏览器中。而浏览器就只需要解析这些代码就行了。</p><p>常见的开发方式有：</p><p>PHP语言的Smarty模板引擎与Thinkphp框架<br>Java语言的Freemarker模板引擎与Jsp页面</p><h2 id="Ajax请求"><a href="#Ajax请求" class="headerlink" title="Ajax请求"></a>Ajax请求</h2><p>Ajax是前后端分离的推进者，使用Ajax后，网页可以实现局部刷新，不需要再依靠刷新页面对网页中的内容进行更新了。<br>同时后台仅需要给前台暴露出前台需要的各种API接口，并对前台提供的接口数据进行增删改查就可以了。<br>这无疑也剩下了很多工作量，也为前端的下一步发展打下了基础。</p><h2 id="前端构建与请求"><a href="#前端构建与请求" class="headerlink" title="前端构建与请求"></a>前端构建与请求</h2><p>传统开发模式中，前端的所有文件都放在了后台的server中。后端的项目通常都会有自己的server，除了php以外。前端构建的话，前端项目也要搭建一个server，然后把前端的项目放到apache或者nginx中。或者利用nodeJs工具集。</p><p>现在前后端分离开了，当然也涉及到请求的问题。这时我们只需要告诉后端服务我们需要的数据就可以了。但这样会产生一个问题，Ajax跨域问题。在这里我们不能用常用的jsonp或者iframe信使等去解决问题，因为我们还有POST请求。</p><p>所以HTTP Proxy类工具就可以用到了，比如我再BrowserSync加入中间件判断每一个请求，如果是/api为前缀的就会被代理到API Server端，API server端接收到数据后再返回给BrowserSync，然后BrowserSync再返回给浏览器。</p><p>生产环境可以前后端分开部署，只需要在前端的server中写好转发规则就可以了，apache和nginx都支持的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>前后端分离的优势：</p><pre><code>前端静态资源与后台api分流，互不影响前后台同步开发，减少沟通成本方便开发调试，不影响工作进度易于维护扩展</code></pre></li><li><p>前后端分离缺点：</p><pre><code>前端负载增加不利于搜索引擎优化</code></pre></li></ol><hr><h1 id="一些理解"><a href="#一些理解" class="headerlink" title="一些理解"></a>一些理解</h1><ol><li><p>前端使用HTML+Ajax，后端使用Java Servlet，这样完全可以做到前后端分离。<br>前端哪天换成了移动App或者桌面App，后端程序可重用、无需重新开发；而后端服务如果需要换成.Net或PHP，前端也可完全重用，前后端做到100%解耦，这就是前后端分离的架构思想。</p></li><li><p>大型的项目肯定是HTML+AJAX，HTML只要浏览器便能解析了，像JSP还要服务器解析编译。<br>jsp这种只能在自己的小项目或者后台系统，像平台级的项目都是HTML+AJAX，这样前后端分离，前后端可以同时由不同的分工开发。</p></li><li><p>如果你注重安全和浏览器响应效率，可以用html，毕竟他是静态网页，加上ajax相当于给他动态行为<br>如果你注重开发效率，可以用jsp， 毕竟他封装的比较多,用起来肯定爽的多</p></li><li><p>jsp是页面先加载数据，ajax是页面后加载数据，这个对搜索引擎的影响很大，若你是做系统之类的项目不需要搜索引擎收录，那区别不大，也就点点效率问题。<br>可是要考虑收录的话你用ajax的方式后加载数据会让搜索引擎获取不到这些内容，你的页面能呈现的只是那些静态的内容，无论你ajax获取的数据有多不同，有多少个页面，对于搜索引擎来说那就是一个页面，因为呈现的内容是一样的</p></li><li><p>总结</p></li></ol><p>HTML+ajax</p><ul><li>有利于前后端分离，便于后期维护，便于前端代码的移植</li><li>HTML浏览器响应效率高，还可以将动静态资源分离，HTML部署在nginx上，效率更高</li><li>安全</li></ul><p>JSP</p><ul><li>封装较多，开发效率高</li><li>如果需要考虑搜索引擎收录，由于jsp是页面先加载数据，ajax是页面后加载数据，那么用ajax的方式后加载数据会让搜索引擎获取不到这些内容，你的页面能呈现的只是那些静态的内容</li></ul><hr><h1 id="比较好的相关文章"><a href="#比较好的相关文章" class="headerlink" title="比较好的相关文章"></a>比较好的相关文章</h1><p>先收着，指不定哪天就醍醐灌顶了</p><p><a href="https://github.com/lifesinger/blog/issues/184" target="_blank" rel="noopener">Web研发模式演变</a></p><p><a href="https://www.cnblogs.com/shanrengo/p/6397734.html" target="_blank" rel="noopener">浅谈架构之路——前后端分离模式</a></p><p>从经典的JSP+Servlet+JavaBean的MVC时代，到SSM（Spring + SpringMVC + Mybatis）和SSH（Spring + Struts + Hibernate）的Java 框架时代，再到前端框架（KnockoutJS、AngularJS、vueJS、ReactJS）为主的MVC时代，然后是Nodejs引领的全栈时代，技术和架构一直都在进步。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;The man with a new idea is a crank until the idea succeeds.——Mark Twain&lt;br&gt;&lt;img src=&quot;/myimages/8.png&quot; alt&gt;&lt;blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="钻牛角尖" scheme="http://yoursite.com/categories/%E9%92%BB%E7%89%9B%E8%A7%92%E5%B0%96/"/>
    
    
      <category term="JSP" scheme="http://yoursite.com/tags/JSP/"/>
    
      <category term="HTML+ajax" scheme="http://yoursite.com/tags/HTML-ajax/"/>
    
  </entry>
  
  <entry>
    <title>深入理解JVM（二）</title>
    <link href="http://yoursite.com/2019/08/29/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/29/深入理解JVM（二）/</id>
    <published>2019-08-28T16:34:15.753Z</published>
    <updated>2019-04-10T13:19:14.343Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"> A contented mind is the greatest blessing a man can enjoy in this world.<br><img src="/myimages/10.jpg" alt><blockquote></blockquote></blockquote></p><p>虚拟机执行子系统</p><a id="more"></a><hr><h1 id="虚拟机执行子系统"><a href="#虚拟机执行子系统" class="headerlink" title="虚拟机执行子系统"></a>虚拟机执行子系统</h1><ul><li>类文件结构</li><li>虚拟机类加载机制</li><li>虚拟机字节码执行引擎</li></ul><hr><h2 id="类文件结构"><a href="#类文件结构" class="headerlink" title="类文件结构"></a>类文件结构</h2><p>一次编写，到处运行：<br>虚拟机提供商发布了可以运行在各种不同平台上的虚拟机，这些虚拟机都可以载入和运行相同的字节码。<br>虚拟机并不关心Class文件的来源是何种语言。</p><h3 id="Class文件格式"><a href="#Class文件格式" class="headerlink" title="Class文件格式"></a>Class文件格式</h3><ol><li><p>Class文件的数据结构：无符号数、表<br>（1）无符号数（基本数据类型）：用来描述数字、索引引用、数值量，或者按照UTF-8编码构成字符串值，u1、u2、u4、u8<br>（2）表（复合数据类型）：用于描述有层次关系的复合结构的数据，以“_info”结尾<br><img src="/myimages/10Class文件格式.png" alt></p></li><li><p>Class文件格式<br>Class的结构没有任何分隔符，所以上表中的数据项，无论是顺序还是数量都是被严格限定的<br>（1）魔数与Class文件的版本<br>魔数（Magic Number）：唯一作用是确定这个文件是否是一个能被虚拟机接受的Class文件<br>版本号（Minor Version、Major Version）<br>（2）常量池<br>Class文件的资源仓库，主要存放字面量、符号引用。</p><pre><code>字面量：文本字符串、声明为final的常量值。符号引用：类和接口的全限定名、字段的名称和描述符、方法的名称和描述符。常量池的特点：1.是Class文件结构中与其他项目关联最多的数据类型2.占用空间最大的数据类型3.Class文件中第一个出现的表类型数据</code></pre><p>（3）访问标志<br>用于识别类或接口的访问信息<br>（4）类索引、父类索引、接口索引集合<br>Class文件中由这三项数据来确定这个类的继承关系<br>（5）字段表集合<br>用于描述接口或类中声明的变量<br>（6）方法表集合<br>用于描述接口或类中声明的方法<br>（7）属性表结合<br>在Class文件、字段表、方法表中都可以携带自己的属性表集合，用于描述某些场景下专有的信息</p></li></ol><h3 id="字节码指令"><a href="#字节码指令" class="headerlink" title="字节码指令"></a>字节码指令</h3><p>Java虚拟机的指令有一个字节长度的操作码（代表某种特定的操作）和操作数（操作所需参数）构成。<br>大多数的指令都包含了其操作所对应的数据类型信息，例如iload指令用于从局部变量表中加载int型的数据到操作数栈中<br>（1）加载和存储指令<br>用于将数据在栈帧中的局部变量表和操作数栈之间来回传输<br>（2）运算指令<br>用于对两个操作数栈上的值进行某种特定运算，并把结果重新存入到操作栈顶。大体可分为：操作整形数据的指令、操作浮点型数据的指令<br>（3）类型转换指令<br>将两种不同的数值类型进行相互转换，这些转换操作一般用于实现用户代码中的显式类型转换操作<br>（4）对象创建与访问指令<br>获取对象实例或者数组实例中的字段或数组元素<br>（5）操作数栈管理指令<br>用于直接操作操作数栈<br>（6）控制转移指令<br>让Java虚拟机有条件或无条件地从指定位置的指令继续执行程序<br>（7）方法调用和返回指令<br>方法调用指令与数据类型无关，而方法返回指令是根据返回值的类型区分的<br>（8）异常处理指令<br>显式抛出异常的操作（throw语句）都由athrow指令来实现<br>处理异常（catch语句）不是由字节码指令实现，而是采用异常表完成<br>（9）同步指令<br>方法级同步：隐式，无序通过字节码之灵来控制，实现在方法调用和返回操作之中<br>方法内部一段指令序列的同步</p><hr><h2 id="虚拟机类加载机制"><a href="#虚拟机类加载机制" class="headerlink" title="虚拟机类加载机制"></a>虚拟机类加载机制</h2><p>类加载机制：虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的java类型</p><p>为什么称Java为动态扩展语言？<br>运行期动态加载和动态连接，虽然令类加载时增加了性能开销，但为java应用程序提供了高度的灵活性</p><h3 id="类的生命周期"><a href="#类的生命周期" class="headerlink" title="类的生命周期"></a>类的生命周期</h3><p><img src="/myimages/10类的生命周期.jpg" alt></p><ol><li>加载、验证、准备、初始化和卸载这5个阶段的开始顺序是确定的，强调开始是因为这些阶段通常都是互相交叉混合执行的。</li><li>什么时候开始类加载过程的第一个阶段——“加载”？没有强制约束</li><li>对于初始化阶段，严格规定有且只有5种情况必须立即对类进行“初始化”，这5种场景中的行为称为对一个类进行主动引用</li><li>加载、验证、准备需要在初始化之前开始</li></ol><h3 id="类加载的过程"><a href="#类加载的过程" class="headerlink" title="类加载的过程"></a>类加载的过程</h3><ol><li>加载<br>加载阶段完成后：<br>（1）通过一个类的全限定名获取定义此类的二进制字节流；<br>（2）虚拟机外部的二进制字节流按照虚拟机所需的格式存储在方法区；<br>（3）内存中实例化一个java.lang.Class类的对象（在方法区中），这个对象将作为程序访问方法区中的这些类型数据的外部接口</li><li>验证<br>（1）作用：确保Class文件的字节流中包含的信息符合当前虚拟机的要求<br>（2）大致分为四个阶段：文件格式验证、元数据验证、字节码验证、符号引用验证<br>（3）验证阶段重要，但不必要</li><li>准备<br>（1）作用：为类变量分配内存、设置类变量初始值（类变量存储在方法区中）<br>（2）准备阶段分配内存是给类变量分配内存，不包括实例变量<br>（3）设置初始值通常是零值</li><li>解析<br>虚拟机将常量池内的符号引用替换为直接引用</li><li>初始化<br>（1）除了加载阶段用户可自定义类加载器，验证、准备、解析完全由虚拟机主导和控制<br>（2）初始化阶段，才真正开始执行用户代码<br>（3）初始化阶段是执行类构造器&lt; clinit &gt;()方法的过程</li></ol><h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><p>类加载器：虚拟机外部，用来引导“类加载”过程的“加载”阶段执行的代码模块</p><ol><li>作用<br>（1）用于实现类的加载动作<br>（2）类加载器和类本身一起，用于确定一个类在Java虚拟机中的唯一性</li><li>类加载器类型<br>（1）启动类加载器（Bootstrap ClassLoader）：虚拟机自身的一部分，由C++实现<br>（2）所有其他的类加载器，独立于虚拟机外部，由Java实现，全都继承自抽象类java.lang.ClassLoader<ul><li>扩展类加载器</li><li>应用程序类加载器（系统类加载器）：程序中默认的类加载器</li></ul></li><li>类加载器之间的层次关系——双亲委派模型<br>双亲委派模型：类加载请求会优先委派给父类加载器去完成<br>好处：Java类随着他的类加载器一起具备了一种带有优先级的层次关系，这对于保证Java程序的稳定运作很重要</li></ol><hr><h2 id="虚拟机字节码执行引擎"><a href="#虚拟机字节码执行引擎" class="headerlink" title="虚拟机字节码执行引擎"></a>虚拟机字节码执行引擎</h2><p>执行引擎是Java虚拟机最核心的组成部分之一<br>从外观上看，所有的Java虚拟机的执行引擎都是一致的：输入的是字节码文件，处理过程是字节码的等效过程，输出的是执行结果</p><h3 id="运行时栈帧结构"><a href="#运行时栈帧结构" class="headerlink" title="运行时栈帧结构"></a>运行时栈帧结构</h3><ul><li>栈帧是虚拟机进行方法调用和方法执行的数据结构</li><li>栈帧与方法一一对应</li><li>栈帧存储了方法的局部变量表、操作数栈、动态连接、返回值地址等信息</li><li>栈帧是运行时数据区中的虚拟机栈的栈元素</li><li>对执行引擎来说，在活动线程中，只有位于栈顶的栈帧才是有效的，成为当前栈帧，对应的方法称为当前方法</li><li>执行引擎运行的所有字节码指令都只对当前栈帧进行操作</li></ul><ol><li>局部变量表<br>（1）用于存放方法参数和方法内部定义的局部变量<br>（2）在Java程序编译为Class文件时，就在方法的Code属性的max_locals数据项中确定了该方法所需分配的局部变量表的最大容量<br>（3）局部变量表的容量以变量槽slot为最小单位<br>（4）虚拟机通过索引定位的方式使用局部变量表，索引值的范围从0开始至局部变量表最大的Slot数量<br>（5）局部变量表不存在类似类加载的“准备阶段”，因此如果一个局部变量定义了但没有赋初始值是不能使用的</li><li>操作数栈<br>（1）存储方法执行过程中的数据<br>（2）后入先出LIFO<br>（3）同局部变量表一样，操作数栈的最大深度也在编译时写在方法的Code属性的max_stacks数据项中<br>（4）方法开始执行时，操作数栈是空的；方法执行过程中，会有各种字节码指令往操作数栈中写入和提取内容（入栈/出栈）<br>（5）操作数栈中元素的数据类型必须与字节码指令的类型严格匹配<br>（6）栈帧重叠：下面栈帧的操作数栈和上面栈帧的局部变量表重叠，这样在方法调用时就可以共用一部分数据，无需进行额外的参数复制传递</li><li>动态连接<br>每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用，这个引用是字节码方法调用指令的参数。<br>（1）静态解析<br>常量池中一部分符号引用会在类加载阶段或者第一次使用的时候转化为直接引用<br>（2）动态连接<br>另外一部分符号引用胡子爱每一次运行期间转化为直接引用</li><li>方法返回地址<br>退出方法的两种方式：<br>（1）正常完成出口：执行引擎遇到任意一个方法返回的字节码指令（是否有返回值和返回值的类型由方法返回指令决定）<br>（2）异常完成出口：方法执行过程中遇到了异常，并且异常没有在方法体中得到处理（不会给上层调用者产生任何返回值）</li></ol><h3 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h3><p>Class文件的编译过程中不包含传统编译中的连接步骤，一切方法调用在Class文件中存储的都只是符号引用，而不是方法在实际运行时内存布局中的入口地址（直接引用）</p><ol><li>静态解析<br>类加载的解析阶段，将一部分符号引用转化为直接引用<br>包括两类方法：静态方法、私有方法</li><li>分派（多态性）<br>（1）静态分派<br>所有依赖静态类型来定位方法执行版本的分派动作称为静态分派<br>静态分派发生在编译阶段，不由虚拟机执行<br>典型应用：重载<br>（2）动态分派<br>在隐形器根据实际类型确定方法执行版本的分派过程称为动态分派<br>典型应用：重写</li><li>动态类型语言<br>动态类型语言的关键特征是它的类型检查的主题过程是在运行期而不是编译期</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt; A contented mind is the greatest blessing a man can enjoy in this world.&lt;br&gt;&lt;img src=&quot;/myimages/10.jpg&quot; alt&gt;&lt;blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/p&gt;
&lt;p&gt;虚拟机执行子系统&lt;/p&gt;
    
    </summary>
    
      <category term="《深入理解JVM》" scheme="http://yoursite.com/categories/%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%E3%80%8B/"/>
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>深入理解JVM（三）</title>
    <link href="http://yoursite.com/2019/08/29/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/29/深入理解JVM（三）/</id>
    <published>2019-08-28T16:34:15.751Z</published>
    <updated>2019-04-10T13:23:37.767Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"> The greater a man is, the more distasteful is praise and flattery to him.<br><img src="/myimages/11.jpg" alt><blockquote></blockquote></blockquote></p><p>Java内存模型、线程、线程安全、锁优化</p><a id="more"></a><hr><h1 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h1><ul><li>衡量一个服务（程序）性能的好坏——每秒事务处理数（TPS），TPS与程序的并发能力密切相关</li><li>实现并发编程的工具<ul><li>Java语言和虚拟机提供的很多工具</li><li>中间件服务器</li><li>各类框架</li></ul></li><li>硬件的效率与一致性<ul><li>硬件效率<pre><code>高速缓存：解决了处理器与内存之间的速度矛盾</code></pre></li><li>缓存一致性问题<pre><code>当多个处理器的运算任务涉及同一块主内存区域时，可能导致各自的缓存数据不一致此时，需要各个处理器访问缓存时遵循一些协议，根据协议进行读写操作</code></pre></li></ul></li></ul><h2 id="主内存与工作内存"><a href="#主内存与工作内存" class="headerlink" title="主内存与工作内存"></a>主内存与工作内存</h2><p>类似于硬件的效率与一致性问题：<br>工作内存解决了Java线程与主内存之间的速度矛盾，但是引入了线程安全的问题</p><p><img src="/myimages/11工作内存与主内存.jpg" alt></p><ol><li>Java内存模型规定了所有的变量都存储在主内存中，每条线程还有自己的工作内存</li><li>线程的工作内存中保存了该线程使用到的变量的主内存副本拷贝，线程对变量的所有操作都必须在工作内存中进行，而不能直接读写主内存中的变量</li></ol><h2 id="内存间交互操作"><a href="#内存间交互操作" class="headerlink" title="内存间交互操作"></a>内存间交互操作</h2><ol><li>内存间交互操作：一个变量如何从主内存拷贝到工作内存、如何从工作内存同步回主内存</li><li>Java内存模型中定义了8中原子性的操作实现主内存与工作内存之间的交互<ul><li>lock</li><li>unlock</li><li>read</li><li>load</li><li>use</li><li>assign</li><li>store</li><li>write</li></ul></li><li>线程读取主内存变量的过程<br><img src="/myimages/11线程读取主内存变量的过程.png" alt></li></ol><h2 id="volatile型变量"><a href="#volatile型变量" class="headerlink" title="volatile型变量"></a>volatile型变量</h2><ol><li>volatile是Java虚拟机提供的最轻量级的同步机制</li><li>volatile作用：<ul><li>保证变量对所有线程的可见性</li><li>禁止指令重排序优化（普通的变量不能保证变量赋值操作的顺序与程序代码中的执行顺序一致）</li></ul></li></ol><h2 id="原子性、可见性、有序性"><a href="#原子性、可见性、有序性" class="headerlink" title="原子性、可见性、有序性"></a>原子性、可见性、有序性</h2><p>Java内存模型是围绕着在并发过程中如何处理原子性、可见性、有序性这3个特征来建立的</p><ol><li>原子性<ul><li>基本数据类型的访问读写是原子性的</li><li>synchronized块之间的操作也具备原子性</li></ul></li><li>可见性<br>当一个线程修改了共享变量的值，其他线程能立即得知这个修改<br>（1）Java内存模型实现可见性的途径<br>变量修改后将新值同步回主内存，修改前从主内存刷新变量值（依赖于主内存作为传递媒介），<strong>普通变量、volatile变量都是如此</strong><br>（2）volatile变量与普通变量的区别<br>volatile修饰的变量：新值立即同步，每次使用前立即从主内存刷新<br>（3）实现可见性的关键字：volatile、synchronized、final</li><li>有序性<br>（1）本线程内观察，所有的操作都是有序的——线程内表现为串行<br>（2）如果在一个线程中观察另一个线程，所有的操作都是无序的——指令重排序现象<br>（3）实现有序性的关键字：volatile、synchronized</li></ol><hr><h1 id="Java线程"><a href="#Java线程" class="headerlink" title="Java线程"></a>Java线程</h1><h2 id="线程的实现"><a href="#线程的实现" class="headerlink" title="线程的实现"></a>线程的实现</h2><p>线程的3中实现方式：使用内核线程实现、使用用户线程实现、使用用户线程加轻量级进程混合实现</p><ol><li>使用内核线程（KLT）实现</li></ol><ul><li>由<strong>操作系统内核</strong>完成线程切换——内核通过操纵<strong>调度器</strong>对线程进行调度，并负责将线程的任务映射到各个处理器上</li><li>程序一般不会直接使用内核线程，而是使用内核线程的一种高级接口——<strong>轻量级进程（LWP）</strong>，与内核线程一一对应（就是通常意义上的线程）</li><li>优点：每个轻量级进程都是一个独立的调度单元，一个阻塞了不影响其他</li><li>缺点：基于内核线程实现，所以各种线程操作都需要进行系统调用，系统调用代价较高，需要在用户态和内核态之间来回切换；消耗内核资源</li></ul><ol start="2"><li>使用用户线程实现</li></ol><ul><li>优点：不需要内核支援</li><li>缺点：所有线程操作都需要用户程序自己处理</li></ul><ol start="3"><li>使用用户线程加轻量级进程混合实现</li><li>Java线程的实现：一条Java线程——一条轻量级进程——一条内核线程</li></ol><h2 id="线程的调度"><a href="#线程的调度" class="headerlink" title="线程的调度"></a>线程的调度</h2><ol><li>协同式线程调度</li><li>抢占式线程调度：每个线程由系统来分配执行时间</li><li>线程优先级：Java提供了10个级别的线程优先级</li></ol><h2 id="线程状态转换"><a href="#线程状态转换" class="headerlink" title="线程状态转换"></a>线程状态转换</h2><ol><li>线程状态<ul><li>新建</li><li>运行</li><li>无限期等待</li><li>限期等待</li><li>阻塞</li><li>结束</li></ul></li><li>线程状态转换<br><img src="/myimages/11线程状态转换.png" alt></li></ol><hr><h1 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h1><h2 id="Java线程安全的分类"><a href="#Java线程安全的分类" class="headerlink" title="Java线程安全的分类"></a>Java线程安全的分类</h2><p>按线程安全的“安全程度”分为5类：</p><ul><li>不可变——final</li><li>绝对线程安全</li><li>相对线程安全——通常意义的线程安全</li><li>线程兼容——通常意义的线程不安全</li><li>线程对立<h2 id="线程安全的实现方法"><a href="#线程安全的实现方法" class="headerlink" title="线程安全的实现方法"></a>线程安全的实现方法</h2></li></ul><ol><li>互斥同步（synchronized、ReentrantLock）<br>（1）synchronized是Java语言中一个重量级的操作，使用它需要java线程映射到内核线程，通过操作系统内核来实现同步，耗费很多处理器时间<br>（2）ReentrantLock相比synchronized增加了三项高级功能：<ul><li>等待可中断</li><li>公平锁</li><li>锁绑定多个条件<br>（3）优先考虑使用synchronized来进行同步</li></ul></li><li>非阻塞同步<br>（1）互斥同步进行线程阻塞和唤醒会带来性能问题，互斥同步属于一种悲观的并发策略（认为不进行同步处理肯定出问题）<br>（2）非阻塞同步（乐观的并发策略）：先进行操作，没有其他线程争用共享数据则操作成功；有其他线程争用共享数据则采取补偿措施</li><li>无同步方案<ul><li>可重入代码（纯代码），所有的可重入代码都是线程安全的</li><li>线程本地存储</li></ul></li></ol><hr><h1 id="锁优化"><a href="#锁优化" class="headerlink" title="锁优化"></a>锁优化</h1><ol><li>锁优化目的<br>在线程之间更高效地共享数据，以及解决竞争问题，从而提高程序的执行效率</li><li>锁优化技术<ul><li>适应性自旋</li><li>锁消除</li><li>锁粗化</li><li>轻量级锁</li><li>偏向锁</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt; The greater a man is, the more distasteful is praise and flattery to him.&lt;br&gt;&lt;img src=&quot;/myimages/11.jpg&quot; alt&gt;&lt;blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/p&gt;
&lt;p&gt;Java内存模型、线程、线程安全、锁优化&lt;/p&gt;
    
    </summary>
    
      <category term="《深入理解JVM》" scheme="http://yoursite.com/categories/%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%E3%80%8B/"/>
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>深入理解JVM（一）</title>
    <link href="http://yoursite.com/2019/08/29/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM/"/>
    <id>http://yoursite.com/2019/08/29/深入理解JVM/</id>
    <published>2019-08-28T16:34:15.750Z</published>
    <updated>2019-04-10T13:17:01.103Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">The shortest way to do many things is to only one thing at a time.<br><img src="/myimages/9.jpg" alt><blockquote></blockquote></blockquote></p><p>自动内存管理机制</p><a id="more"></a><hr><h1 id="为啥学JVM"><a href="#为啥学JVM" class="headerlink" title="为啥学JVM"></a>为啥学JVM</h1><ol><li>在绝大多数情况下，提升硬件性能无法等比例地提升程序的运作性能和并发能力。</li><li>这里面有Java虚拟机的原因：为了达到给所有硬件提供一致的虚拟平台的目的，牺牲了一些与硬件相关的性能特性。</li><li>当开发人员了解了JVM的运行原理，才能写出最适合虚拟机运行和自优化的代码。</li></ol><hr><h1 id="相关知识点梳理"><a href="#相关知识点梳理" class="headerlink" title="相关知识点梳理"></a>相关知识点梳理</h1><p><strong>1. 自动内存管理机制</strong></p><ul><li>内存动态分配<ul><li>运行时数据区域</li><li>内存溢出异常</li></ul></li><li>垃圾自动回收<ul><li>垃圾收集算法</li><li>垃圾收集器</li><li>内存分配与回收策略 </li></ul></li></ul><p><strong>2. 虚拟机执行子系统</strong></p><ul><li>Class类文件的结构</li><li>虚拟机类加载机制<ul><li>类加载的时机和过程</li><li>类加载器</li></ul></li><li>虚拟机字节码执行引擎</li></ul><p><strong>3. 高效并发</strong></p><ul><li>Java内存模型</li><li>Java线程</li><li>线程安全与锁优化<ul><li>线程安全</li><li>锁优化</li></ul></li></ul><hr><h1 id="自动内存管理机制"><a href="#自动内存管理机制" class="headerlink" title="自动内存管理机制"></a>自动内存管理机制</h1><h2 id="内存区域"><a href="#内存区域" class="headerlink" title="内存区域"></a>内存区域</h2><p><img src="/myimages/9运行时数据区.png" alt></p><p>上图中：<br>绿色区域——所有线程共享的数据区<br>黄色区域——线程隔离的数据区</p><p><strong>1. 程序计数器</strong>：当前线程正在执行的字节码指令的地址<br>        （1）每条线程都有一个独立的程序计数器<br>        （2）如果线程执行Java方法，则计数器记录的是正在执行的字节码问指令的地址<br>        （3）如果执行的是Native方法，则计数器值为空（Undefined）<br>        （4）此区域是唯一一个在Java虚拟机规范中没有滚定任何OutOfMemoryError情况的区域</p><p><strong>2. 虚拟机栈</strong>：描述的是Java方法执行的内存模型。每个方法执行时都会创建一个栈帧（Stack Frame），用于存储局部变量表等…<br>局部变量表中包括：基本数据类型、对象引用、return Address类型</p><p><strong>3. 堆</strong>：虚拟机启动时创建，唯一目的是存储实例对象（包括数组）<br>        Java堆是内存管理的主要区域，因此也称“GC堆”</p><p><strong>4. 方法区</strong>：用于存储已被虚拟机加载的类信息、常量、静态变量等…</p><p><strong>5. 常量池</strong>：存放编译期生成的各种字面量和符号引用</p><h2 id="虚拟机中的对象"><a href="#虚拟机中的对象" class="headerlink" title="虚拟机中的对象"></a>虚拟机中的对象</h2><h3 id="对象的创建（5步）"><a href="#对象的创建（5步）" class="headerlink" title="对象的创建（5步）"></a>对象的创建（5步）</h3><ol><li>检查类的符号引用，执行类加载过程<pre><code>检查：new指令的参数与是否能在常量池中定位到一个类的符号引用，并检查这个符号引用代表的类是否已经被加载</code></pre></li><li>分配内存<pre><code>（1）分配方式：指针碰撞（java堆中的内存是规整的）；空闲列表（java堆中的内存不规整）（2）内存区域是否规整由所采用的垃圾收集器是否带有压缩整理功能决定</code></pre></li><li>初始化为零值</li><li>设置对象头</li><li>执行init()方法，按照程序员的意愿初始化</li></ol><h3 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h3><ol><li>对象头<ul><li>对象自身的运行时数据（哈希码、GC分代年龄、线程持有的锁…）</li><li>类型指针</li><li>记录数组长度的数据（数组特有）</li></ul></li><li>实例数据部分：对象真正存储的有效信息</li><li>对齐填充<pre><code>对象的大小必须是8字节的整数倍，所以需要占位符来填充</code></pre></li></ol><h3 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h3><p>Java程序需要通过栈上的引用数据来操作堆上的具体对象，主流的对象的访问方式有两种：句柄访问、直接指针</p><ol><li>句柄访问：堆中划分一块内存作为句柄池，栈中存储的是对象的句柄地址</li><li>直接指针：栈中存储的直接就是对象地址</li></ol><h2 id="判断对象是否存活"><a href="#判断对象是否存活" class="headerlink" title="判断对象是否存活"></a>判断对象是否存活</h2><p><strong>1. 引用计数算法</strong><br>（1）给对象中添加一个引用计数器，引用一次+1，引用失效-1。则引用计数器为0的对象就是不可能再被使用的<br>（2）不能解决对象之间互相循环引用的问题</p><p><strong>2. 可达性分析算法</strong><br>（1）起始点：一系列GC Roots对象</p><ul><li>虚拟机栈中引用的对象</li><li>方法区中静态变量引用的对象</li><li>方法区中常量引用的对象</li><li>本地方法栈中JNI（Native方法）引用的对象</li></ul><p>（2）引用链（Reference Chain）：从起始点出发的搜索路径<br>（3）当一个对象到起始点的没有任何引用链相连，则证明此对象不可用</p><p><strong>3. 引用的概念</strong><br>（1）JDK1.2之前，引用定义为：如果reference类型的数据中存储的数值代表的是另外一块内存的起始地址，就称这块内存代表着一个引用<br>（2）JDK1.2后，java对引用概念进行了扩充，分为：</p><ul><li>强引用：永远不回收</li><li>软引用：将要溢出才回收，SoftReference类实现</li><li>弱引用：必定回收，WeakReference类实现</li><li>虚引用：被关联对象被回收时会显示系统通知，PhantomReference类实现</li></ul><p><strong>4. 对象被GC的条件</strong><br><img src="/myimages/9对象被GC的条件.png" alt><br>如上图所示，真正宣告一个队形死亡，至少要经理两次标记过程</p><ul><li>第一次判断对象是否与GC Roots相连，不相连则做“筛选标记”</li><li>第二次判断对象是否重新关联引用链，关联了则做“复活标记”</li></ul><p>关于finallize()方法需要注意：<br>（1）任何一个对象的finallize()方法都只会被系统自动调用一次<br>（2）如果对象面临下一次回收，它的finallize()方法不会再执行，对象就无法自救了<br>（3）不建议使用finallize()方法</p><h2 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h2><p><strong>1. 标记-清除算法（Mark-Sweep）</strong><br>首先标记出需要回收的对象，标记完成后统一回收<br><strong>不足：</strong></p><ul><li>效率问题——标记和清除的效率低</li><li>空间问题——清除后产生大量不连续的内存碎片</li></ul><p><strong>2. 复制算法（Copying）</strong><br>将内存分为较大的一块Eden区和两块较小的Survivor区，每次使用Eden和其中一块Survivor。（HotSpot虚拟机中Eden：Survivor=8:1）<br>回收时，将Eden和Survivor中还存活的对象一次性复制到另外一块Survivor空间上，清理掉Eden和刚才用过的Survivor空间。</p><p><strong>3. 标记-整理算法（Mark-Compact）</strong><br>标记过程和“标记-清理”算法一致，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后清理掉端边界以外的内存。</p><p><strong>4. 分代收集算法</strong><br>（1）新生代：复制算法<br>新生代中，每次垃圾收集时都会有大量的对象死去，只有少量存活<br>（2）老年代：标记-清理算法、标记-整理算法<br>老年代中对象存活率高，没有额外空间对它进行分配担保</p><h2 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h2><p><strong>从JDK1.3到JDK1.7，GC的发展历程：</strong></p><pre><code>JDK1.3：Serial收集器（包括Serial Old）Parallel收集器（包括ParNew、JDK1.4：Parallel Scavenge、JDK1.6：Parallel Old）JDK1.5：Concurrent Mark Sweep（CMS）——第一款真正意义上的并发（Concurrent）收集器；实现了垃圾收集线程和用户线程基本上同时工作JDK1.7：Garbage First（G1）</code></pre><p><strong>1. Serial收集器（新生代）</strong><br>（1）单线程<br>（2）Stop The World：Serial进行垃圾收集时，必须暂停其他所有的工作线程（直到最新G1收集器出现，这个问题也没有完全解决，只是用户线程的暂停时间越来越短了）<br>（3）JVM在Client模式下的<strong>默认</strong>新生代收集器<br>（4）优点：简单、高效</p><p><strong>2. ParNew收集器（新生代）</strong><br>（1）Serial收集器的多线程版本：使用多个线程进行垃圾收集<br>（2）JVM在Server模式下<strong>首选</strong>的新生代收集器<br>（3）除了Serial收集器外，只有ParNew能与CMS收集器配合使用（Parallel Scavenge不能配合CMS）</p><p><strong><em>区分并发与并行</em></strong></p><pre><code>并行（Parallel）：指多条垃圾回收线程并行工作，但此时用户线程仍然处于等待状态并发（Concurrent）：指用户线程和垃圾处理线程同时执行（但不一定是并行的，可能会交替执行），用户程序在继续执行，而垃圾收集程序运行在另一个CPU上</code></pre><p><strong>3. Parallel Scavenge收集器（新生代）</strong><br>（1）其他收集器关注GC时<strong>用户线程的停顿时间</strong>，Parallel Scavenge收集器的目标是达到一个可控的<strong>吞吐量</strong>，因此又称“吞吐量优先”收集器</p><pre><code>吞吐量 = 运行用户代码时间 / （运行用户代码时间+垃圾收集时间）</code></pre><p>（2）停顿时间短：适合用户交互式程序<br>    吞吐量大：适合非交互的运算任务</p><pre><code>停顿时间与吞吐量成反比</code></pre><p>（3）Parallel Scavenge收集器有一个开关参数，打开后就可以动态调整细节参数（新生代大小、Eden与Survivor比例、晋升老年代对象大小等），以提供最适合的停顿时间/吞吐量——<strong>GC自适应的调节策略</strong></p><p><strong>4. Serial Old收集器（老年代）</strong><br>（1）单线程，标记-整理算法<br>（2）主要给Client模式下的JVM使用<br>（3）Server模式下，与Parallel Scavenge收集器搭配使用，或者作为CMS收集器的备选</p><p><strong>5. Parallel Old收集器（老年代）</strong><br>（1）多线程，标记-整理算法<br>（2）Parallel Old是Parallel Scavenge收集器的老年代版本，一般配合Parallel Scavenge，实现“吞吐量优先”</p><p><strong>6. CMS收集器（老年代）</strong><br>（1）目标：获取最短回收停顿时间<br>（2）第一款真正意义上的<strong>并发（Concurrent）收集器</strong>；实现了垃圾收集线程和用户线程基本上同时工作<br>（3）标记-清除算法<br>（4）步骤</p><ul><li>初始标记（CMS initial mark）</li><li>并发标记（CMS concurrent mark）</li><li>重新标记（CMS remark）</li><li><p>并发清除（CMS concurrent sweep）</p><pre><code>初始标记、重新标记两个步骤仍然要“Stop The World”，但这两个阶段的停顿时间很短；整个过程中并发标记和并发清除耗时最长，但收集器线程都可以与用户线程一起工作；所以，总体来说，CMS收集器的内存回收过程食欲用户线程一起并发执行的。</code></pre><p>（5）CMS的优点：并发收集、低停顿时间<br>缺点：CMS收集器对CPU资源非常敏感；无法处理浮动垃圾；CMS基于“标记-清除”算法，效率低、产生大量碎片空间</p></li></ul><p><strong>7. G1收集器</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;The shortest way to do many things is to only one thing at a time.&lt;br&gt;&lt;img src=&quot;/myimages/9.jpg&quot; alt&gt;&lt;blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/p&gt;
&lt;p&gt;自动内存管理机制&lt;/p&gt;
    
    </summary>
    
      <category term="《深入理解JVM》" scheme="http://yoursite.com/categories/%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%E3%80%8B/"/>
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>测试图片</title>
    <link href="http://yoursite.com/2019/08/29/%E6%B5%8B%E8%AF%95%E5%9B%BE%E7%89%87/"/>
    <id>http://yoursite.com/2019/08/29/测试图片/</id>
    <published>2019-08-28T16:34:15.749Z</published>
    <updated>2019-04-10T14:26:14.824Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">Hello picture.<br><img src="/myimages/20.jpg" alt></blockquote></p><a id="more"></a><hr><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>之前博客中的图片都无法正常显示了</p><hr><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><ol><li><p>在 /Blog/source 目录下新建文件夹，命名为”myimages”</p></li><li><p>将带引用的图片放入 myimages 文件夹下</p></li><li><p>在博文中利用markdown语法引入图片：</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](/myimages/图片文件名)</span><br></pre></td></tr></table></figure><blockquote><p>把之前的所有博文中的图片都按照上面的方法重新引用了，还好不多-_-||</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;Hello picture.&lt;br&gt;&lt;img src=&quot;/myimages/20.jpg&quot; alt&gt;&lt;/blockquote&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="hello hexo" scheme="http://yoursite.com/categories/hello-hexo/"/>
    
    
      <category term="修改图片问题" scheme="http://yoursite.com/tags/%E4%BF%AE%E6%94%B9%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://yoursite.com/2019/08/29/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/29/正则表达式/</id>
    <published>2019-08-28T16:34:15.747Z</published>
    <updated>2019-04-10T14:00:46.979Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">Never put off what you can do today until tomorrow.<br><img src="/myimages/18.jpg" alt></blockquote></p><a id="more"></a><hr><h1 id="正则表达式语法"><a href="#正则表达式语法" class="headerlink" title="正则表达式语法"></a>正则表达式语法</h1><p><img src="/myimages/18正则表达式-字符类+预定义字符类.png" alt></p><p><img src="/myimages/18正则表达式-数量词.png" alt></p><p><img src="/myimages/18正则表达式-边界匹配器.png" alt></p><hr><h1 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h1><p><img src="/myimages/18常用正则.png" alt></p><p><strong>邮箱正则</strong></p><p>/^([a-zA-Z0-9_.-])+\@(([a-zA-Z0-9-])+.)+([a-zA-Z0-9]{2,4})+$/</p><p>/.+@.+.[a-zA-Z]{2,4}$/</p><hr><h1 id="正则应用"><a href="#正则应用" class="headerlink" title="正则应用"></a>正则应用</h1><h2 id="字符串匹配（验证Email是否正确）"><a href="#字符串匹配（验证Email是否正确）" class="headerlink" title="字符串匹配（验证Email是否正确）"></a>字符串匹配（验证Email是否正确）</h2><pre><code>public static void main(String[] args) {// 要验证的字符串String str = &quot;service@xsoftlab.net&quot;;// 邮箱验证规则String regEx = &quot;[a-zA-Z_]{0,}[0-9]{0,}@(([a-zA-z0-9]-*){1,}\\.){1,3}[a-zA-z\\-]{1,}&quot;;// 编译正则表达式Pattern pattern = Pattern.compile(regEx);// 忽略大小写的写法// Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);Matcher matcher = pattern.matcher(str);// 字符串是否与正则表达式相匹配boolean rs = matcher.matches();System.out.println(rs);}一种更简单的方式：String regEx = &quot;[a-zA-Z_]{0,}[0-9]{0,}@(([a-zA-z0-9]-*){1,}\\.){1,3}[a-zA-z\\-]{1,}&quot;;System.out.println(&quot;service@xsoftlab.net&quot;.matches(regEx));</code></pre><h2 id="字符串查找（在字符串中查找符合规则的子串）"><a href="#字符串查找（在字符串中查找符合规则的子串）" class="headerlink" title="字符串查找（在字符串中查找符合规则的子串）"></a>字符串查找（在字符串中查找符合规则的子串）</h2><pre><code>public static void main(String[] args) {// 要验证的字符串String str = &quot;这是一个正则表达式字符串查找的示例12345，正则表达式好厉害呀45678&quot;;// 正则表达式规则String regEx = &quot;\\d+&quot;;// 编译正则表达式Pattern pattern = Pattern.compile(regEx);// 忽略大小写的写法// Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);Matcher matcher = pattern.matcher(str);// 查找字符串中是否有匹配正则表达式的字符/字符串while (matcher.find()) {    System.out.println(matcher.group());}}输出结果：1234545678</code></pre><h2 id="贪婪模式与非贪婪模式"><a href="#贪婪模式与非贪婪模式" class="headerlink" title="贪婪模式与非贪婪模式"></a>贪婪模式与非贪婪模式</h2><ol><li>正则表达式默认使用贪婪模式，会尽可能多的匹配所搜索的字符串</li><li>当”?”字符紧跟在任何一个其他限制符 (*, +, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串</li></ol><h3 id="贪婪模式"><a href="#贪婪模式" class="headerlink" title="贪婪模式"></a>贪婪模式</h3><pre><code>public static void main(String[] args) {// 要验证的字符串String str = &quot;这是一个正则表达式字符串查找的示例，正则表达式好厉害呀&quot;;// 编译正则表达式Pattern pattern = Pattern.compile(&quot;正.*式&quot;);// 开始匹配Matcher matcher = pattern.matcher(str);// 查找字符串中是否有匹配正则表达式的字符/字符串while (matcher.find()) {    System.out.println(matcher.group());}}输出：正则表达式字符串查找的示例，正则表达式</code></pre><h3 id="非贪婪模式"><a href="#非贪婪模式" class="headerlink" title="非贪婪模式"></a>非贪婪模式</h3><pre><code>public static void main(String[] args) {// 要验证的字符串String str = &quot;这是一个正则表达式字符串查找的示例，正则表达式好厉害呀&quot;;// 编译正则表达式Pattern pattern = Pattern.compile(&quot;正.*?式&quot;);// 开始匹配Matcher matcher = pattern.matcher(str);// 查找字符串中是否有匹配正则表达式的字符/字符串while (matcher.find()) {    System.out.println(matcher.group());}}输出：正则表达式正则表达式</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;Never put off what you can do today until tomorrow.&lt;br&gt;&lt;img src=&quot;/myimages/18.jpg&quot; alt&gt;&lt;/blockquote&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="小知识点" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="RegExp" scheme="http://yoursite.com/tags/RegExp/"/>
    
  </entry>
  
  <entry>
    <title>易错点-正则+反射+IO流+网络编程</title>
    <link href="http://yoursite.com/2019/08/29/%E6%98%93%E9%94%99%E7%82%B9-%E6%AD%A3%E5%88%99-%E5%8F%8D%E5%B0%84-IO%E6%B5%81-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/08/29/易错点-正则-反射-IO流-网络编程/</id>
    <published>2019-08-28T16:34:15.746Z</published>
    <updated>2019-04-10T12:52:01.338Z</updated>
    
    <content type="html"><![CDATA[<p><div align="center"><strong>正则；反射；IO流；网络编程和JavaWeb</strong></div><br><img src="/myimages/5.jpg" alt></p><a id="more"></a><hr><h1 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h1><hr><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><pre><code>1 反射破坏代码的封装性，破坏原有的访问修饰符访问限制</code></pre><hr><h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><pre><code>1 一个文件中的数据要在控制台上显示，首先要把这个文件读进来，然后再输出，所以首先要建立文件输入流FileInputStream，然后再建立标准输出流 System.out2 File类  （1）File类是Java中对文件进行读写操作的基本类（×）  （2）File类是对文件整体或者文件属性操作的类，例如创建文件、删除文件、查看文件是否存在等功能。  File类不能操作文件内容，文件内容是用IO流操作的。  （3）不论是文本文件还是二进制文件，在计算机中都是以二进制形式存储的，所以都当做二进制文件读取3 使用ObjectOutputStream和ObjectInputStream可以将对象进行传输4 哪个类可用于处理Unicode?  答：InputStreamReader可以指定字符编码格式</code></pre><hr><h1 id="网络编程-JavaWeb"><a href="#网络编程-JavaWeb" class="headerlink" title="网络编程/JavaWeb"></a>网络编程/JavaWeb</h1><pre><code>1 Web工程的目录结构  /WEB-INF/web.xml 是部署描述文件，用来初始化配置信息  /WEB-INF/classes 用来放置应用程序用到的自定义类(.class)，必须包括包(package)结构  /WEB-INF/lib 用来放置应用程序用到的JAR文件2 Socket通信编程  客户端通过new Socket()方法创建通信的Socket对象  服务器端通过new ServerSocket()创建TCP连接对象 accept接纳客户端请求3 connect()属于客户端，将此套接字连接到服务器4 URL一般有四部分组成： &lt;协议&gt;://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt;   &lt;主机&gt;是指主机在因特网上的域名。  http协议的默认&lt;端口&gt;为80（可以省略）5 判断：service()方法处理客户机发出的所有请求   （√）  解析：service()是servlet真正处理客户端传过来的请求的方法，由web容器调用，根据HTTP请求方法（GET、POST等），将请求分发到doGet、doPost等方法6 service()方法是接收请求，返回响应的方法  每次请求都执行一次，该方法被HttpServlet封装为doGet和doPost方法  service()是在javax.servlet.Servlet接口中定义的  doGet/doPost是在javax.servlet.http.HttpServlet中实现的7 servlet和CGI  （1）servlet处于服务器进程中，它通过多线程方式运行其他service方法  （2）CGI对每个请求都产生新的进程，服务完成后销毁  （3）CGI不可移植。为某一特定平台编写的CGI应用只能运行于这一运行环境中8 ServletContext、ServletConfig  （1）ServletContext中可以存放共享数据。ServletContext对象是真正的一个全局对象，凡是web容器中的Servlet都可以访问  （2）ServletConfig对象：用于封装servlet的配置信息（初始化参数），ServletConfig接口默认是通过GenericServlet实现的9 判断：servlet在多线程下使用了同步机制，因此，在并发编程下servlet是线程安全的  （×）10 2EE中，使用Servlet过滤器，需要在web.xml中配置什么元素？  答： Servlet过滤器的配置包括两部分：  第一部分是过滤器在Web应用中的定义，由&lt;filter&gt;元素表示，包括&lt;filter-name&gt;和&lt;filter-class&gt;两个必需的子元素  第二部分是过滤器映射的定义，由&lt;filter-mapping&gt;元素表示,可以将一个过滤器映射到一个或者多个Servlet或JSP文件，  也可以采用url-pattern将过滤器映射到任意特征的URL11 forward：服务器获取跳转页面内容传给用户，用户地址栏不变  redirect：是服务器向用户发送转向的地址，redirect后地址栏变成新的地址12 取http请求中的cookie值的方法：request.getHeader、request.getCookies13 HttpServletResponse功能：设置http头标，设置cookie，设置返回数据类型，输出返回数据  HttpServletRequest功能：读取路径信息...14 getParameter()是获取POST/GET传递的参数值  getInitParameter获取Tomcat的server.xml中设置Context的初始化参数  getAttribute()是获取对象容器中的数据值  getRequestDispatcher是请求转发15 有四种方法可以实现会话跟踪技术：URL重写、隐藏表单域、Cookie、Session16 WebServer  Webservice是跨平台，跨语言的远程调用技术;  它的通信机制实质就是xml数据交换;  它采用了soap协议（简单对象协议）进行通信17 JSP  （1）Jsp只会在客户端第一次发请求的时候被编译，之后的请求不会再编译，同时tomcat能自动检测jsp变更与否，变更则再进行编译。  （2）第一次编译并初始化时调用：init()；销毁调用：destroy()。在整个jsp生命周期中均只调用一次18 JSP分页代码中先取总记录数，得到总页数，最后显示本页的数据19 JSP内置对象 request对象、response对象、session对象、out对象、 page对象、application对象、exception对象、 pageContext对象、config对象20 JSP 四大作用域：page (作用范围最小)、request、session、application（作用范围最大）  （1）存储在application对象中的属性可以被同一个WEB应用程序中的所有Servlet和JSP页面访问。（属性作用范围最大）  （2）存储在session对象中的属性可以被属于同一个会话（浏览器打开直到关闭称为一次会话，且在此期间会话不失效）的所有Servlet和JSP页面访问。  （3）存储在request对象中的属性可以被属于同一个请求的所有Servlet和JSP页面访问（在有转发的情况下可以跨页面获取属性值）  例如使用PageContext.forward和PageContext.include方法连接起来的多个Servlet和JSP页面。  （4）存储在pageContext对象中的属性仅可以被当前JSP页面的当前响应过程中调用的各个组件访问  例如，正在响应当前请求的JSP页面和它调用的各个自定义标签类21 JSP中静态include和动态include：  （1）动态 INCLUDE 用 jsp:include 动作实现 &lt;jsp:include page=&quot;included.jsp&quot; flush=&quot;true&quot; /&gt;   它总是会检查所含文件中的变化 , 适合用于包含动态页面 , 并且可以带参数。各个文件分别先编译，然后组合成一个文件。  （2）静态 INCLUDE 用 include 伪码实现 , 但不会检查所含文件的变化 , 适用于包含静态页面 &lt;%@ include file=&quot;included.htm&quot; %&gt;  先将文件的代码被原封不动地加入到了主页面从而合成一个文件，然后再进行编译，此时不允许有相同的变量。（3）区别：  include两种用法主要有两个方面的不同：  1）执行时间上:&lt;%@ include file=&quot;relativeURI&quot;%&gt; 是在翻译阶段执行&lt;jsp:include page=&quot;relativeURI&quot; flush=&quot;true&quot; /&gt; 在请求处理阶段执行  2）引入内容的不同:&lt;%@ include file=&quot;relativeURI&quot;%&gt;引入静态文本 (html,jsp), 在 JSP 页面被转化成 servlet 之前和它融和到一起&lt;jsp:include page=&quot;relativeURI&quot; flush=&quot;true&quot; /&gt; 引入执行页面或 servlet 所生成的应答文本</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;strong&gt;正则；反射；IO流；网络编程和JavaWeb&lt;/strong&gt;&lt;/div&gt;&lt;br&gt;&lt;img src=&quot;/myimages/5.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="我的错题库" scheme="http://yoursite.com/categories/%E6%88%91%E7%9A%84%E9%94%99%E9%A2%98%E5%BA%93/"/>
    
      <category term="牛客错题整理" scheme="http://yoursite.com/categories/%E6%88%91%E7%9A%84%E9%94%99%E9%A2%98%E5%BA%93/%E7%89%9B%E5%AE%A2%E9%94%99%E9%A2%98%E6%95%B4%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>易错点-框架+其他</title>
    <link href="http://yoursite.com/2019/08/29/%E6%98%93%E9%94%99%E7%82%B9-%E6%A1%86%E6%9E%B6-%E5%85%B6%E4%BB%96/"/>
    <id>http://yoursite.com/2019/08/29/易错点-框架-其他/</id>
    <published>2019-08-28T16:34:15.744Z</published>
    <updated>2019-04-10T13:07:34.768Z</updated>
    
    <content type="html"><![CDATA[<p><div align="center"><strong>框架；其他暂未分类的题目</strong></div><br><img src="/myimages/6.jpg" alt></p><a id="more"></a><hr><h1 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h1><pre><code>1 Spring  （1）Spring并没有为我们提供日志系统，我们需要使用AOP（面向方面编程）的方式，借助Spring与日志系统log4j实现我们自己的日志系统。  （2）Spring是一系列轻量级Java EE框架的集合  （3）Spring中包含一个“依赖注入”模式的实现  （4）使用Spring可以实现声明式事务2 判断：使用mvc模式设计的web应用程序可以大大减少代码量（×）  解析：MVC只是将分管不同功能的逻辑代码进行了隔离，增强了可维护和可扩展性，增强代码复用性，因此可以减少代码重复。  但是不保证减少代码量，多层次的调用模式还有可能增加代码量3 依赖注入（DI）设计模式  （1）依赖注入是一种思想，或者说是一种设计模式，在java中是通过反射机制实现，与具体框架无关  （2）Spring依赖注入（DI）的三种方式，分别为：接口注入、Setter 方法注入、构造方法注入4 在Struts框架中如果要使用Validation作验证的话，需要使用DynaValidatorActionForm5 关于struts框架判断（1）Struts中无法完成上传功能  （×）（2）Struts框架基于MVC模式    （√）（3）Struts框架容易引起流程复杂、结构不清晰等问题   （×）（4）Struts可以有效地降低项目的类文件数目 （×）</code></pre><hr><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><pre><code>1 环境变量可在编译source code时指定2 JVM在判定两个class是否相同时，不仅要判断两个类名是否相同，而且要判断是否由同一个类加载器实例加载的3 java object默认的基本方法中没有copy()，含有如下方法：  getClass(), hashCode(), equals(), clone(), toString(), notify(), notifyAll(),wait(), finalize()4 Java类加载器  （1）Bootstrap：一般用本地代码实现，负责加载 JVM 基础核心类库（ rt.jar ）  （2）Extension：从 java.ext.dirs 系统属性所指定的目录中加载类库，它的父加载器是 Bootstrap  （3）system class loader：又叫应用类加载器，其父类是 Extension 。它是应用最广泛的类加载器。它从环境变量 classpath或者系统属性 java.class.path 所指定的目录中加载类，是用户自定义加载器的默认父加载器  （4）用户自定义类加载器：java.lang.ClassLoader 的子类5 判断：javac一次可同时编译数个Java源文件    （√）6 判断：一个文件中只能有一个public class     （×）  解析： 一个文件中，可以有多个public class。外部类为public，还可以有public的内部类7 判断：若类中只含一个main方法，则必须是public的   （×）  解析：类中，可以有main方法，也可以没有main方法。而有一个main()方法的时候，也可以是任意访问权限，因为这个类不一定要执行，可以只是辅助类8 判断：javac.exe能指定编译结果要置于哪个目录（directory）     （√）  解析：－s指定存放生成的源文件的位置    9 java调试器jdb.exe10 判断：如果一个源文件中有多个类，那么构造器必须与公共类同名（×）   解析：如果有多个类，那么每个类都可以有自己的构造器，构造器与所属的类同名即可11 一个Java源程序文件中定义几个类和接口，则编译该文件后生成几个以.class为后缀的字节码文件</code></pre><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><pre><code>1 DBMS：数据库管理系统(Database Management System)  DBMS是一种操纵和管理数据库的大型软件，用于建立、使用和维护数据库，简称DBMS  （1）DBMS对数据库的保护通过4个方面来实现：    数据库的恢复    数据库的并发控制    数据库的完整性控制    数据库安全性控制  （2） DBMS中事务有四个特性：持久性，一致性，原子性，隔离性    持久性实现——恢复管理子系统    一致性实现——并发控制子系统    原子性实现——完整性管理子系统    隔离性实现——安全控制管理子系统2 JDBC statement  （1）Statement、PreparedStatement和CallableStatement都是接口(interface)  （2）Statement继承自Wrapper、PreparedStatement继承自Statement、CallableStatement继承自PreparedStatement  （3）Statement接口提供了执行语句和获取结果的基本方法；        PreparedStatement接口添加了处理 IN 参数的方法；        CallableStatement接口添加了处理 OUT 参数的方法  （4）PreparedStatement的占位符对应着即将与之对应当值，并且一个占位符只能对应一个值      CallableStatement:支持调用存储过程,提供了对输入/输出参数(INOUT)的支持</code></pre><h2 id="图形化"><a href="#图形化" class="headerlink" title="图形化"></a>图形化</h2><pre><code>1 Swing与AWT  （1）Swing    为解决 AWT 存在的问题而新开发的图形界面包。Swing是对AWT的改良和扩展。Swing由纯Java写成，可移植性好，外观在不同平台上相同。    Swing是AWT的子类（×）    Swing在不同的操作系统中显示相同的风格（√）  （2）AWT    AWT抽象窗口工具包，早期编写图形界面应用程序的包。是通过调用操作系统的native方法实现的，所以不同的操作系统有不同的外观风格。    AWT在不同操作系统中显示相同的风格（×）    AWT不支持事件类型，Swing支持事件模型（×）2 判断：JPanel中不能包含按钮     （×）</code></pre><h2 id><a href="#" class="headerlink" title="#"></a>#</h2><pre><code>1 软件系统测试的16个策略  系统测试的16个策略：功能测试，性能测试（负载测试），压力测试，容量测试，安全性测试，GUI测试（易用性测试），  可用性测试，安装测试，配置测试，异常测试，备份测试，健壮性测试，文档测试，在线帮助测试，网络测试，稳定性测试2 在Applet中：  （1）init()：初始化；  （2）start()：激活；  （3）stop()：当Applet被覆盖时，可用stop()方法停止线程，典型作用是挂起一个线程；（applet 程序的页面最小化时执行的语句）  （4）destroy()：终止Applet,释放Applet的所有资源3 （1）实现GBK编码字节流到UTF-8编码字节流的转换：  byte[] src,dst;  dst=new String(src，&quot;GBK&quot;).getBytes(&quot;UTF-8&quot;);  （2）java中将ISO8859-1字符串转成GB2312编码：new String(&quot;ISO8959-1&quot;.getBytes(&quot;ISO8959-1&quot;)，“GB2312”)4 判断：每个中文字符占用2个字节，每个英文字符占用1个字节（×）  解析：Java一律采用Unicode编码方式，每个字符无论中文还是英文字符都占用2个字节5 判断：Java的char类型，通常以UTF-16 Big Endian的方式保存一个字符（√）6 JMX是在JDK1.4开始支持的7 效率最高的复制方法：System.arraycopy()8 面向对象的五大基本原则：        单一职责原则（SRP）        开放封闭原则（OCP）         里氏替换原则（LSP）         依赖倒置原则（DIP）         接口隔离原则（ISP）9 依赖注入目的是减少组件之间的耦合度，使开发变得简单10  int i = 0;    i=i++;    //执行赋值操作之后再++    System.out.println(i);        /*返回值为0      若执行i++则返回1      若执行i=++i则返回1*/11 中间件：中间件是一种独立的系统软件或服务程序，分布式应用软件借助这种软件在不同的技术之间共享资源。中间件位于客户机/服务器的操作系统之上，管理计算机资源和网络通讯   判断：中间件运行于客户机/服务器的操作系统内核中，提高内核运行效率 （×）   解析：中间件并不能提高内核的效率，一般只是负责网络信息的分发处理12 判断：finalize是Object类的一个方法，在垃圾收集器执行的时候会调用被回收对象的此方法，可以覆盖此方法提供垃圾收集时的其他资源的回收，例如关闭文件等 （×）   解析：finalize()方法用于在垃圾回收器将对象从内存中清理出去之前，做必要的清理工作（整理系统资源、执行其他清理工作）。但是finalize()方法不一定被JVM调用，只有当垃圾回收器要清除垃圾时才被调用13 判断：java语言中的方法必定属于某一类  （×）   解析：方法也可以属于接口14 @SuppressWarnings(“deprecation”)的功能是：屏蔽不赞同使用的类和方法的警告15 判断：假设数据库中的字符是以GBK编码的，那么显示数据库数据的网页也必须是GBK编码的    （×）   解析：不同的编码之间是可以转换的16 判断：str+=&apos;     a&apos;     （×）   解析：有空格是字符串，需要用双引号17 java线程类优先级相同      （×）18 编码---判断：  （1）ASCII码是ANSI码的子集 （√）  （2）在简体中文的Windows系统中，ANSI就是GB2312 （√）  （3）ASCII码都是可打印字符 （×） 解析：ASCII还包含空字符19 路径的表示  （1） ./——表示当前项目的路径  （2） ../——表示当前目录的父目录路径  （3）盘符：/name/file——表示物理路径20 null可以被强制类型转换成任意类型（不是任意类型对象），于是可以通过它来执行静态方法21 private float f=1.0;      //编译错误（大类型——&gt;小类型，需要进行强制转换 private float f=1.0f;/ private float f=float(1.0);）22 Java事件处理模型：事件源、事件对象、事件监听器23 Log4j的日志打印级别可以在运行时重新设置   （×）24 Java程序的种类：  （a）内嵌于Web文件中，由浏览器来观看的_Applet  （b）可独立运行的 Application  （c）服务器端的 Servlets25 java和C++都有三个特征：封装、继承和多态26 int count = 0;  count=count++;   //这种赋值没有意义，count++先赋值，再自加，所以count值永远是0</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;strong&gt;框架；其他暂未分类的题目&lt;/strong&gt;&lt;/div&gt;&lt;br&gt;&lt;img src=&quot;/myimages/6.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="我的错题库" scheme="http://yoursite.com/categories/%E6%88%91%E7%9A%84%E9%94%99%E9%A2%98%E5%BA%93/"/>
    
      <category term="牛客错题整理" scheme="http://yoursite.com/categories/%E6%88%91%E7%9A%84%E9%94%99%E9%A2%98%E5%BA%93/%E7%89%9B%E5%AE%A2%E9%94%99%E9%A2%98%E6%95%B4%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>易错点-多线程+常用对象API</title>
    <link href="http://yoursite.com/2019/08/29/%E6%98%93%E9%94%99%E7%82%B9-%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%B8%B8%E7%94%A8%E5%AF%B9%E8%B1%A1API/"/>
    <id>http://yoursite.com/2019/08/29/易错点-多线程-常用对象API/</id>
    <published>2019-08-28T16:34:15.743Z</published>
    <updated>2019-04-10T12:51:01.806Z</updated>
    
    <content type="html"><![CDATA[<p><strong>多线程；String类、StringBuffer类、StringBuilder类；数组；基本数据类型包装类；集合类；其他对象API（System类、Runtime类、Math类、Date类、Calendar类）</strong><br><img src="/myimages/4.jpg" alt></p><a id="more"></a><hr><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><p>创建并启动线程的过程为：定义线程——&gt;实例化线程——&gt;启动线程</p><ol><li>定义线程：<br>（1）扩展java.lang.Thread类<br>（2）实现java.lang.Runnable接口</li><li>实例化线程：<br>（1）如果是扩展java.lang.Thread类的线程，则直接new即可。<br>（2）如果是实现了java.lang.Runnable接口的类，则用Thread的构造方法：</li></ol><pre><code>Thread(Runnable target)  eg: new Thread(new MyRunnable()).start()Thread(Runnable target, String name) Thread(ThreadGroup group, Runnable target) Thread(ThreadGroup group, Runnable target, String name) Thread(ThreadGroup group, Runnable target, String name, long stackSize)</code></pre><ol start="3"><li>启动线程：<br>在线程的Thread对象上调用start()方法，而不是run()或者别的方法</li></ol><pre><code>1 run()方法用来执行线程体中具体的内容  start()方法用来启动线程对象，使其进入就绪状态  sleep()方法用来使线程进入睡眠状态  suspend()方法用来使线程挂起，要通过resume()方法使其重新启动2 线程停止的三种方式  （1）调用stop()  （2）异常抛出  （3）线程执行完毕3 锁：函数使用的锁是this(即对象本身)，若函数被static修饰则锁为 类名.class4 ConcurrentHashMap使用ReentrantLock来保证线程安全。  （1）hashMap在单线程中使用大大提高效率，在多线程的情况下使用hashTable来确保安全。  （2）hashTable中使用synchronized关键字来实现安全机制，但是synchronized是对整张hash表  进行锁定即让线程独享整张hash表，在安全同时造成了浪费。  （3）concurrentHashMap采用分段加锁的机制来确保安全5 Java并发  （1）CopyOnWriteArrayList适合使用在读操作远远大于写操作的场景里，比如缓存。  （2）ReadWriteLock当写操作时，其他线程无法读取或写入数据，  而当读操作时，其它线程无法写入数据，但却可以读取数据 。适用于读取远远大于写入的操作。  （3）ConcurrentHashMap是一个线程安全的HashMap，它的主要功能是提供了一组和HashMap  功能相同但是线程安全的方法。ConcurrentHashMap可以做到读取数据不加锁，不用对整个ConcurrentHashMap加锁6 线程调度算法是平台独立的7 前台线程与后台线程  （1）jre 判断程序是否执行结束的标准是所有的前台线程执行完毕。 属于某个进程的所有前台线程都终止后，该进程就会被终止。  （2）可以在任何时候将前台线程修改为后台线程，方式是设置Thread.IsBackground 属性。  （3）不管是前台线程还是后台线程，如果线程内出现了异常，都会导致进程的终止。  （4）托管线程池中的线程都是后台线程，使用new Thread方式创建的线程默认都是前台线程。  说明：一般后台线程用于处理时间较短的任务，如在一个Web服务器中可以利用后台线程来处理客户端发过来的请求信息。  而前台线程一般用于处理需要长时间等待的任务，如在Web服务器中的监听客户端请求的程序，或是定时对某些系统资源进行扫描的程序8 截止JDK1.8版本,java并发框架支持锁包括：读写锁、自旋锁、乐观锁9 同步器是一些使线程能够等待另一个线程的对象，允许它们协调动作。最常用的同步器是CountDownLatch和Semaphore，不常用的是Barrier 和Exchanger10 ThreadLocal  （1）ThreadLocal用于创建线程的本地变量，该变量是线程之间不共享的  （2）ThreadLocal是采用哈希表的方式来为每个线程都提供一个变量的副本  （3）ThreadLocal保证各个线程间数据安全，每个线程的数据不会被另外线程访问和破坏  ThreadLocal的作用是提供线程内的局部变量（类似于private static的作用，但是多个线程之间数据又不共享），这种变量在线程的生命周期内起作用，  减少同一个线程内多个函数或者组件之间一些公共变量的传递的复杂度</code></pre><hr><h1 id="String类、StringBuffer类、StringBuilder类"><a href="#String类、StringBuffer类、StringBuilder类" class="headerlink" title="String类、StringBuffer类、StringBuilder类"></a>String类、StringBuffer类、StringBuilder类</h1><pre><code>1 string是值传递，stringbuffer是引用传递2 String a=&quot;Hello&quot;;  String b=a.substring(0,2);  //b的值为He，substring( )方法截取的字符串“左闭右开”3 String类默认是final类型的，不能继承和修改这个类（String属于值传递）4 String s =new String(“xyz”);创建了几个string object？  答：两个， 第一个在堆中，第二个在字符串常量池中！如果在Java字符串常量池中已经存在，就只会创建一个</code></pre><hr><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><pre><code>1 判断：int a[][]=new int[][]        （×）  解析：二维数组的声明必须指定第一个维度的初始值2 在java 中，声明一个数组时，不能直接限定数组长度，只有在创建实例化对象时，才能对给定数组长度3 判断：Java实现了真数组，避免了覆盖数据类型的可能   （×）  解析：Java实现了真数组，避免了数据覆盖的可能，而不是数据覆盖类型</code></pre><hr><h1 id="基本数据类型包装类"><a href="#基本数据类型包装类" class="headerlink" title="基本数据类型包装类"></a>基本数据类型包装类</h1><pre><code>1 ==和.equals()运算  （1）基本型和基本型封装型进行“==”运算符的比较，基本型封装型将会自动拆箱变为基本型后再进行比较  （2） 两个Integer类型（不是new出来的）进行“==”比较，如果其值在-128至127，那么返回true，否则（会new对象，然后比较地址值）返回false  （3） 两个基本型的封装型进行equals()比较，首先equals()会比较类型，如果类型相同，则继续比较值，如果值也相同，返回true  （4） 基本型封装类型调用equals()，但是参数是基本类型，这时候，先会进行自动装箱，基本型转换为其封装类型，再进行（3）中的比较2 可以把任何一种数据类型的变量赋给Object类型的变量。其中，基本数据类型会自动装箱3 Java中的byte，short，char进行计算时都会先提升为int类型  注意：没有final修饰的变量相加后，才会被自动提升为int型；       而被fianl修饰的变量不会自动改变类型，当两个final修饰的变量相操作时，结果会根据左边变量的类型而转化4 instanceof：可以用来判断某个实例变量是否属于某种类的类型，还可以判断某个类是否属于某个类的子类的类型</code></pre><hr><h1 id="集合类"><a href="#集合类" class="headerlink" title="集合类"></a>集合类</h1><h2 id="集合框架、Collection、Iterator"><a href="#集合框架、Collection、Iterator" class="headerlink" title="集合框架、Collection、Iterator"></a>集合框架、Collection、Iterator</h2><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><ol><li>List集合有序（添加顺序）且可重复</li><li>List继承自Collection接口，List也是一个接口。</li><li>ArrayList、LinkedList、Vector类实现了List接口。用的时候一般都用ArrayList</li><li>ArrayList、LinkedList的选择：<br>（1）对于随机访问get和set，ArrayList优于LinkedList，因为LinkedList要移动指针；<br>对于新增和删除操作add和remove，LinkedList比较占优势，因为ArrayList要移动数据<br>（2）当操作是在一列数据的后面添加数据而不是在前面或中间，并且需要随机地访问其中的元素时，使用ArrayList会提供比较好的性能；<br>当你的操作是在一列数据的前面或中间添加或删除数据，并且按照顺序访问其中的元素时，就应该使用LinkedList了</li><li>ArrayList是实现List接口的大小可变数组<br>ArrayList删除元素后，剩余元素会依次向前移动，因此下标一直在变，size()也会减小</li></ol><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><ol><li>List一定有序，Set不一定无序<br>我们经常听说List是有序且重复的，Set是无序不重复的。这里有个误区，这里说的顺序有两个概念，一是按添加的顺序排列，二是按自然顺序a-z排列。<br>Set并不是无序的，传统说法中的Set无序是指HashSet,它不能保证元素的添加顺序，更不能保证自然顺序。<br>而Set的其他实现类是可以实现这两种顺序的（TreeSet可以实现自然顺序有序，LinkedHashSet可以实现添加顺序有序）</li><li>AbstractSet类实现了Set接口<br>HashSet继承了AbstractSet类，所以相当于也实现了Set接口（Java中子类会继承父类对于接口的实现）</li><li>ResultSet跟普通的数组不同，索引从1开始而不是从0开始</li></ol><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><pre><code>1 key-value对，键值对，相同键值会放在一处，后一个会覆盖前一个的数值2 HashMap可以插入null的key或value  插入的时候，检查是否已经存在相同的key，如果不存在，则直接插入；  如果存在，则用新的value替换旧的value3 在Java中，HashMap中是用链地址法来解决哈希冲突的4 判断：HashTable使用Enumeration，HashMap使用Iterator   （√）   解析：Hashtable、HashMap都使用了Iterator。而由于历史原因，Hashtable还使用了Enumeration的方式5 判断：Hashtable直接使用对象的hashCode，HashMap重新计算hash值，而且用与代替求模 （√）</code></pre><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><h2 id="集合框架工具类（Collections、Arrays）"><a href="#集合框架工具类（Collections、Arrays）" class="headerlink" title="集合框架工具类（Collections、Arrays）"></a>集合框架工具类（Collections、Arrays）</h2><pre><code>1 Arrays.asList()  （1）将一个数组转化为一个List对象，这个方法会返回一个ArrayList类型的对象  但这个ArrayList类并非java.util.ArrayList类，而是Arrays类的静态内部类！  （2）用这个对象对列表进行添加删除更新操作，就会报UnsupportedOperationException异常</code></pre><hr><h1 id="其他对象API"><a href="#其他对象API" class="headerlink" title="其他对象API"></a>其他对象API</h1><h2 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h2><pre><code>1 判断：我们在程序中经常使用“System.out.println()”来输出信息，语句中的System是包名，out是类名，println是方法名 （×）  解析：System是java.lang中的一个类，out是System内的一个成员变量，  这个变量是一个java.io.PrintStream类的对象，println()是它的一个方法</code></pre><h2 id="Runtime类"><a href="#Runtime类" class="headerlink" title="Runtime类"></a>Runtime类</h2><h2 id="Number类"><a href="#Number类" class="headerlink" title="Number类"></a>Number类</h2><pre><code>1 Number类可以被继承，Integer，Float，Double等都继承自Number类</code></pre><h2 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h2><pre><code>1 ceil()/floor()  （1）Math.ceil(d1)  //如果参数小于0且大于-1.0，结果为-0  （2）Math.floor(d1)  //如果参数是无穷、正0、负0，那么结果与参数相同（如果是-0.0，那么其结果是-0.0）</code></pre><h2 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h2><h2 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;多线程；String类、StringBuffer类、StringBuilder类；数组；基本数据类型包装类；集合类；其他对象API（System类、Runtime类、Math类、Date类、Calendar类）&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;/myimages/4.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="我的错题库" scheme="http://yoursite.com/categories/%E6%88%91%E7%9A%84%E9%94%99%E9%A2%98%E5%BA%93/"/>
    
      <category term="牛客错题整理" scheme="http://yoursite.com/categories/%E6%88%91%E7%9A%84%E9%94%99%E9%A2%98%E5%BA%93/%E7%89%9B%E5%AE%A2%E9%94%99%E9%A2%98%E6%95%B4%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>易错点-Java核心概念</title>
    <link href="http://yoursite.com/2019/08/29/%E6%98%93%E9%94%99%E7%82%B9-Java%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/"/>
    <id>http://yoursite.com/2019/08/29/易错点-Java核心概念/</id>
    <published>2019-08-28T16:34:15.740Z</published>
    <updated>2019-04-10T12:46:21.956Z</updated>
    
    <content type="html"><![CDATA[<p><strong>变量与常量；运算符；构造方法与一般（成员）方法；成员变量与静态变量；成员变量与局部变量；静态块、构造块、执行顺序优先级；关键字；继承、实现；抽象类、接口；重载、重写；多态；内部类；异常；包、权限；内存管理</strong><br><img src="/myimages/3.jpg" alt></p><a id="more"></a><hr><h1 id="变量与常量；运算符"><a href="#变量与常量；运算符" class="headerlink" title="变量与常量；运算符"></a>变量与常量；运算符</h1><h2 id="区分变量、常量、形参"><a href="#区分变量、常量、形参" class="headerlink" title="区分变量、常量、形参"></a>区分变量、常量、形参</h2><p>变量是一个引用，常量代表一个数值，形参只是一个标识。</p><pre><code>1 变量有它对应的地址和值，需要为它开辟内存空间  变量存在于堆或栈中2 常量存在于常量池中，在类加载之前就已经被加载，且不会改变  实际应用中，常量常用来配置文件路径3 形参只是一个标识符号，用来传递实参</code></pre><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><pre><code>1 运算符优先级    括号&gt;    单元操作符&gt;    算术运算符&gt;    移位操作符&gt;    关系运算符&gt;    位运算符&gt;    逻辑运算符&gt;    三元操作符&gt;    赋值运算符2 区分&amp;和&amp;&amp;  &amp;在逻辑运算中是非短路逻辑与，在位运算中是按位与  &amp;&amp;在逻辑运算中是 逻辑与、短路3 区分|与||  用法：condition 1 | condition 2、condition 1 ||condition 2  &quot;|&quot;是按位或：先判断条件1，不管条件1是否可以决定结果（这里决定结果为true)，都会执行条件2  &quot;||&quot;是逻辑或：先判断条件1，如果条件1可以决定结果（这里决定结果为true)，那么就不会执行条件24 计算机用补码存储数据  -n=~n+15 &lt;&lt;表示左移位  &gt;&gt;表示带符号右移位  &gt;&gt;&gt;表示无符号右移  但是没有&lt;&lt;&lt;运算符6 int a = 2, b = 0;  do { --b; } while (a --&gt; 0);//判断循环结束后a/b的值  由于判断条件中--在后因此先做判断再--  第一次进入do中b变为-1，此时a=2判断大于0为真，然后a--变为1  第二次进入do中b变为-2，此时a=1判断大于0为真，然后a--变为0  第三次进入do中b变为-3，此时a=0判断大于0为假，跳出while7 if (flag = true) //这是一个赋值运算，而不是判断是否相等。返回值为true</code></pre><hr><h1 id="一对方法、两对变量"><a href="#一对方法、两对变量" class="headerlink" title="一对方法、两对变量"></a>一对方法、两对变量</h1><h2 id="构造方法和成员方法"><a href="#构造方法和成员方法" class="headerlink" title="构造方法和成员方法"></a>构造方法和成员方法</h2><ol><li>构造方法：①对象创建时自动调用，对该对象进行初始化；②只调用一次；③没有返回值；④构造器中的this()指向同一个类中重载的另一个构造器。</li><li>成员方法：①对象创建后，需要主动调用；②可以调用多次；③必须有返回值；④方法中引用this指向该方法所属类的对象。</li></ol><pre><code>1 判断：构造方法只能通过new自动调用（×）  解析：构造方法可以通过反射自动调用2 如果父类中只有有参构造函数，没有无参构造函数，则子类构造函数必须显式调用3 判断：如果子类只有一个有参构造函数，那么必然会调用父类中相同参数的构造函数  解析：可以调用父类无参的构造函数，子类的有参构造函数和是否调用父类的有参数的构造函数无必然联系</code></pre><h2 id="成员-实例变量与静态变量-类变量"><a href="#成员-实例变量与静态变量-类变量" class="headerlink" title="成员/实例变量与静态变量/类变量"></a>成员/实例变量与静态变量/类变量</h2><ol><li>二者生命周期不同：成员变量依存于对象，静态变量依存于类</li><li>数据存储位置不同：成员变量存储于堆中，静态变量存储于方法区中</li><li>调用方式不同：成员变量需要先创建对象，再通过“对象.成员变量”来调用，静态变量直接用类名调用</li></ol><pre><code>1 关于变量初始化  无论是类变量还是实例变量，在使用前都是非空的。而局部变量没有初始化过程，在使用前必须赋值2 Java中静态变量只能在类主体中定义，不能在方法中定义；因为静态变量属于类所有而不属于方法3 判断代码结果：  public class Test{public int x;public static void main(String []args){    System. out. println(&quot;Value is&quot; + x);//错误，非静态变量不能直接被静态方法引用。//可以先创建Test类的对象，用对象调用非静态变量。</code></pre><h2 id="成员-实例变量与局部变量"><a href="#成员-实例变量与局部变量" class="headerlink" title="成员/实例变量与局部变量"></a>成员/实例变量与局部变量</h2><p>局部变量作用在方法或区域代码块中</p><pre><code>1 局部变量必须初始化2 局部变量不能用static修饰3 静态代码块中的变量为局部变量4 java采用局部优先的思想；  局部变量可以和成员变量相同，使用标识符调用时，优先使用局部变量</code></pre><hr><h1 id="静态块、构造块、执行顺序优先级"><a href="#静态块、构造块、执行顺序优先级" class="headerlink" title="静态块、构造块、执行顺序优先级"></a>静态块、构造块、执行顺序优先级</h1><ol><li>静态代码块：给类初始化，JVM加载类时执行，仅执行一次。</li><li>构造代码块：给所有对象初始化，每一次创建对象时执行（有通用性）</li><li>构造函数：给对应的对象初始化（有针对性），随着类的加载而加载进内存，但不执行（区分执行和加载）</li><li>执行顺序优先级：【静态块=静态成员变量】&gt;main()&gt;【构造块=普通成员变量&gt;构造方法】<br>且前后两个区域，父类优先级&gt;子类优先级</li></ol><hr><h1 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h1><p><strong><em>Java所有关键字、保留字</em></strong><br><img src="/myimages/3java关键字.jpg" alt></p><pre><code>1 静态方法（包括main方法）中不能有this，因为静态方法属于类而不属于某个对象，this指代当前对象2 static不能修饰局部变量，被static修饰的变量称为静态变量，静态变量属于整个类，而局部变量属于方法，只在该方法内有效3 声明为static和transient类型的成员数据不能被串行化/序列化。因为static代表类的状态，transient代表对象的临时数据4 volatile关键字：用于限定变量只能从内存中读取，保证对于所有线程而言，值都是一致的。但volatile不能保证线程安全。  判断：对volatile变量的操作不会造成阻塞 （√）  对volatile变量的操作是原子性的  （×）  不依赖其他锁机制，多线程环境下的计数器可用volatile实现 （×）5 判断：This调用语句必须是构造函数中的第一个可执行语句（×）  解析：this()（调用无参构造方法）才必须是构造函数中的第一个可执行语句，用this调用语句（即this.）并不需要6 为什么super( )和this( )不能同时出现在同一个构造函数中？  答：任何的子类都必须要先调用父类的构造函数，  而当你采用“显示构造方法调用”即用this(...)调用当前类的其他构造函数时，这个时候父类的构造就在this(...)里面执行了，  this(...)里面应该不仅包括当前类的构造，还必须包括父类的构造。7 一个类只要实现了Serilizable接口，这个类的所有属性和方法都会自动序列化；  这个类的有些属性需要序列化，而其他属性不需要被序列化；  其中不需要序列化的属性和方法用 transient关键字标记8 final类型的变量一定要初始化，因为final的变量不可更改9 判断：引用变量被final修饰之后，不能再指向其他对象，它指向的对象的内容也是不可变的 （×）  解析：使用 final 关键字修饰一个变量时，是指引用变量不能变，引用变量所指向的对象中的内容还是可以改变的10 synchronized很强大，既可以保证可见性，又可以保证原子性，而volatile不能保证原子性11 switch case语句  （1）在Java7之前，switch只能支持 byte、short、char、int或者其对应的封装类以及Enum类型，不能是float，double和boolean类型。String类型是java7开始支持。  （2）在switch语句中，表达式的值不能是null，否则会在运行时抛出NullPointerException。  （3）在case字句中也不能使用null，否则会出现编译错误。同时，case字句的值是不能重复的12 形参的修饰符  对于形式参数只能用final修饰符，其它任何修饰符都会引起编译器错误  但是用这个修饰符也有一定的限制，就是在方法中不能对参数做任何修改  不过一般情况下，一个方法的形参不用final修饰。只有在特殊情况下——也就是：方法内部类。  一个方法内的内部类如果使用了这个方法的参数或者局部变量的话，这个参数或局部变量应该是final</code></pre><hr><h1 id="继承、实现"><a href="#继承、实现" class="headerlink" title="继承、实现"></a>继承、实现</h1><pre><code>1 判断：（1）子类可以继承父类的构造函数（×）        解析：子类不可以继承父类的构造函数，只是调用父类构造函数（系统默认调用父类无参构造函数super();）       （2）子类可以继承父类中的私有成员变量（√）        解析：无论父类中的成员变量是私有的、共有的、还是其它类型的，子类都会拥有父类中的这些成员变量。        但是父类中的私有成员变量，无法在子类中直接访问，必须通过从父类中继承得到的protected、public方法        （如getter、setter方法）来访问。2 先继承，再实现，否则编译报错3 判断：优先选用接口，尽量少用抽象类  （√）  解析： 继承的耦合性太强，java推荐高内聚低耦合的设计思路，不推荐使用继承</code></pre><hr><h1 id="抽象类、接口"><a href="#抽象类、接口" class="headerlink" title="抽象类、接口"></a>抽象类、接口</h1><ol><li>抽象类中可以有构造方法，接口中不能有构造方法，也不能实例化接口的对象</li><li>抽象类中可以包含静态方法，接口中不能包含静态方法（JDK1.8之前）</li><li>抽象类和接口中都可以包含静态成员变量；抽象类中的静态成员变量的访问类型可以任意，但接口中定义的变量只能是public static final类型，并且默认即为public static final类型</li><li>抽象类中可以有普通成员变量/成员方法，接口中不能有（JDK1.8之前）</li><li>JDK1.8之后，接口可以有default、static方法，而不只有抽象方法</li><li>判断：抽象类自身可以定义成员而接口不可以（×）<br>解析：1.8之后接口允许定义default成员变量/方法</li><li>接口中可以不声明任何方法和成员变量；<br>抽象类可以不包含抽象方法，但有抽象方法的类一定要声明为抽象类。</li><li>抽象类和接口中方法的默认访问权限：<br>关于抽象类<br>JDK 1.8 以前，抽象类的方法默认访问权限为protected<br>JDK 1.8 时，抽象类的方法默认访问权限变为default<br>关于接口<br>JDK 1.8 以前，接口中的方法必须是public的<br>JDK 1.8 时，接口中的方法可以是public的，也可以是default的</li></ol><hr><h1 id="重载、重写"><a href="#重载、重写" class="headerlink" title="重载、重写"></a>重载、重写</h1><ol><li><p>重载：在同一个类中<br>①方法名相同，参数列表不同<br>②与方法的返回值无关，与权限修饰符无关</p></li><li><p>重写：在子父类中<br>遵循“两同两小一大”的规则：<br>①两同：方法名相同，形参列表相同<br>②两小：子类方法返回值类型应比父类方法返回值类型更小或相等，子类方法声明抛出的异常类应比父类方法声明抛出的异常类更小或相等<br>③一大：子类方法的访问权限应比父类方法的访问权限更大或相等</p></li><li><p>子类重写父类方法时，方法的访问权限不能小于原访问权限。在接口中，方法的默认权限是public，那么子类重写后权限只能是public</p></li><li>java中可以有多个重载的main方法，只有public static void main(String[] args){}是函数入口</li></ol><hr><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><pre><code>1 call by value（值传递）不会改变实际参数的数值  call by reference（引用传递）不会改变实际参数的地址，但是可以改变实际参数的内容2 判断：多态性意味着一个操作在不同的类中可以有不同的实现方式（√）</code></pre><hr><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><ol><li>局部内部类：定义在一个方法或者一个作用域<br>和成员内部类的区别在于：局部内部类的访问仅限于方法内或者该作用域内</li><li>成员内部类：定义在类中<br>（1）成员内部类可以无条件访问外部类的所有成员属性和成员方法（包括private成员和静态成员）。<br>（2）成员内部类中的成员与外部类中的成员重名，默认情况下访问的是内部类的成员。<br>（3）其他外部类访问成员内部类，需要先创建内部类的对象才能访问其中的成员。  //别人访问它<br>（4）成员内部类是依附外部类而存在的，也就是说，如果要创建成员内部类的对象，前提是必须存在一个外部类的对象</li><li>匿名内部类：<br>（1）匿名内部类用得最多，在编写事件监听的代码时使用匿名内部类不但方便，而且使代码更加容易维护。<br>（2）匿名内部类用法与局部内部类不一致，首先从定义上就不一样，匿名类用在任何允许存在表达式的地方，而局部内部类用于在任何允许出现局部变量的地方出现。 匿名类只能使用一次，而局部类则可以在自己的定义域内多次使用。<br>（3）匿名内部类是唯一一种没有构造器的类。正因为其没有构造器，所以匿名内部类的使用范围非常有限，大部分匿名内部类用于接口回调</li><li>静态内部类：<br>（1）静态内部类是不需要依赖于外部类的，相当于另外一个外部类。这点和类的静态成员属性有点类似，并且它不能直接使用外部类的非static成员变量或者方法（需要先创建外部类的对象）//它访问别人</li></ol><pre><code>1 判断：包含在java文件里的公共类必须与文件的名字相同（×）  解析：公共的内部类不需要和文件同名2 判断（1）对于局部内部类，只有在方法的局部变量被标记为final或局部变量是effctively final的，内部类才能使用它们     （√）（2）成员内部类位于外部类内部，可以直接调用外部类的所有方法（静态方法和非静态方法）    （√）（3）由于匿名内部类只能用在方法内部，所以匿名内部类的用法与局部内部类是一致的  （×）（4）静态内部类可以访问外部类的成员变量  （×）（5）静态内部类不可以直接访问外围类的非静态数据，而非静态内部类可以直接访问外围类的数据，包括私有数据   （√）3 匿名内部类：（1）匿名内部类的创建格式为： new 父类构造器（参数列表）|实现接口（）{     //匿名内部类的类体实现  }（2）使用匿名内部类时，必须继承一个类或实现一个接口（3）匿名内部类由于没有名字，因此不能定义构造函数（4）匿名内部类中不能含有静态成员变量和静态方法</code></pre><hr><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><pre><code>1 判断：在有除法存在的代码处，为了防止分母为零，必须抛出并捕获异常（×）  解析：分母为0 为运行时异常，jvm帮我们捕获，无需代码里面显式捕获2 判断：在有除法存在的代码处，抛不抛出异常均可     （√）  解析：除数为0 等ArithmeticException，是RuntimException的子类。而运行时异常将由运行时系统自动抛出，  不需要使用throw语句。Java编译器允许忽略运行时异常，一个方法可以既不捕捉，也不声明抛出运行时异常3 FileNotFoundException属于编译时异常，需要处理4 判断：catch块和finally块可以同时省略    （×）  解析：假如try中有异常抛出，则会去执行catch块，再去执行finally块；假如没有catch块，可以直接执行finally块，  方法就以抛出异常的方式结束，而finally后的内容也不会被执行，所以catch 和finally不能同时省略5 若catch中的参数类型有父类子类关系，此时应该将父类放在后面，子类放在前面6 catch捕获到异常后程序结束7 finally{}代码块总是比return先执行（除非finally代码块中也有return语句）8 （1）finally是在return后面的表达式运算后执行的（返回值已经确定）  （2）finally语句块在 catch语句块中的return语句之前执行  （3）确定返回值——&gt;执行finally语句——&gt;执行catch语句块中的return语句  （4）如果finally语句块中有return会使程序提前结束，不再返回catch中的return语句的结果9 wait()方法要以try/catch包覆，或是掷出InterruptedException才行</code></pre><hr><h1 id="包、权限"><a href="#包、权限" class="headerlink" title="包、权限"></a>包、权限</h1><h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><ol><li>包的权限<br>（1）default修饰符，可以被同一包中所有类访问<br>（2）protected修饰符，可以被同一包中所有类访问，被修饰的类也可以作为父类被所有子类访问</li><li>Java中类与成员的<strong>访问权限</strong>共有四种：public，private，protected，还包括default<br>（1）对于外部类来说，只有两种修饰，public和默认（default），因为外部类放在包中，只有两种可能，包可见和包不可见。<br>（2）对于内部类来说，可以有所有的修饰，因为内部类放在外部类中，与成员变量的地位一致，所以有四种可能</li><li>类<strong>访问控制符</strong>有三种：public ，private， protected</li></ol><pre><code>1 在子类中不能访问父类的private字段，否则编译不通过2 判断：实例方法可直接调用超类的实例方法  （×）  解析：实例方法可以调用超类公有实例方法</code></pre><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><ol><li>常用Java包<br>java.awt：包含构成抽象窗口工具集的多个类，用来构建和管理应用程序的图形用户界面<br>java.lang：提供java编成语言的程序设计的基础类<br>java.io：包含提供多种输出输入功能的类，<br>java.net：包含执行与网络有关的类，如URL，SCOKET，SEVERSOCKET，<br>java.applet：包含java小应用程序的类<br>java.util：包含一些实用性的类</li></ol><pre><code>1 判断：静态内部类不可以直接访问外围类的非静态数据，而非静态内部类可以直接访问外围类的数据，包括私有数据 （√）2 有一个源代码，只包含import java.util.* ; 这一个import语句，能访问java/util目录下的所有类，不能访问java/util子目录下的所有类3 package语句必须作为源文件的第一条非注释性语句，一个源文件只能指定一个包，只能包含一条package语句</code></pre><hr><h1 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h1><ol><li>JDK1.6提供的6种作用于不同年代的垃圾收集器</li></ol><p><img src="/myimages/3JDK1.6垃圾收集器.jpg" alt></p><ol start="2"><li>年轻代的GC 叫 young GC ，有时候也叫  minor GC 。年老代或者永久代的 GC ，叫  full GC ，也叫 major GC<br>（1）新生代：1）所有对象创建在新生代的Eden区，当Eden区满后触发新生代的Minor GC，将Eden区和非空闲Survivor区存活的对象复制到另外一个空闲的Survivor区中。2）保证一个Survivor区是空的，新生代Minor GC就是在两个Survivor区之间相互复制存活对象，直到Survivor区满为止。<br>（2）老年代：当Survivor区也满了之后就通过Minor GC将对象复制到老年代。老年代也满了的话，就将触发Full GC，针对整个堆（包括新生代、老年代、持久代）进行垃圾回收。<br>（3）持久代：持久代如果满了，将触发Full GC<br><strong><em>一则形象的小故事帮你理解：</em></strong><br><img src="/myimages/3内存管理.png" alt></li><li>堆内存：<br>（1）java的堆内存分为两块:permantspace（持久带） 和 heap space<br>（2）持久带中主要存放静态类型数据，如Java Class, Method 等， 与垃圾收集器要收集的Java对象关系不大。<br>（3）heapspace分为年轻带和年老带 。年轻代的垃圾回收叫 Young GC， 年老代的垃圾回收叫 Full GC。<br>（4）年老代溢出原因： 循环上万次的字符串处理、创建上千万个对象、在一段代码内申请上百M甚至上G的内存<br>（5） 持久代溢出原因：动态加载了大量Java类而导致溢出</li></ol><pre><code>1 jvm中垃圾回收分为scanvenge gc和full GC，其中full GC触发的条件可能有哪些？  答：老年代满、持久代满、System.gc()2 String str2=str1.substring(5);  //substring()方法实际上是new了对象存在堆中，而不是将返回的字符串存在常量池中，常量池是PermGen的3 判断：在Java中，对于不再使用的内存资源，如调用完成的方法，“垃圾回收器”会自动将其释放（×）  解析：方法调用时，会创建栈帧在栈中，调用完是程序自动出栈释放，而不是gc释放4 方法区和堆是被线程共享的区域；在方法区中，存储了每个类的信息（包括类的名称、方法信息、字段信息）、静态变量、常量以及编译器编译后的代码等。  方法区和堆内存是线程共享的；程序计数器、虚拟机栈是线程隔离的5 （1）jvm堆分为：新生代（一般是一个Eden区，两个Survivor区），老年代（old区）。常量池属于 PermGen（方法区）  （2） java7，字符串常量池从方法区移到堆中。java8 整个常量池从方法区中移除。方法区使用元空间（MetaSpace）实现6 两个最基本的jvm的垃圾回收算法：复制算法、标记算法  新生代基本采用复制算法，老年代采用标记整理算法，cms采用标记清理7 Heap空间（不包括PermGen）保留的字符数为new对象所占的空间。PermGen 中是常量所占的空间8 判断：垃圾回收机制保证了JAVA程序不会出现内存溢出   （×）  解析：垃圾回收机制只是回收不再使用的JVM内存，如果程序有严重BUG，照样内存溢出</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;变量与常量；运算符；构造方法与一般（成员）方法；成员变量与静态变量；成员变量与局部变量；静态块、构造块、执行顺序优先级；关键字；继承、实现；抽象类、接口；重载、重写；多态；内部类；异常；包、权限；内存管理&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;/myimages/3.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="我的错题库" scheme="http://yoursite.com/categories/%E6%88%91%E7%9A%84%E9%94%99%E9%A2%98%E5%BA%93/"/>
    
      <category term="牛客错题整理" scheme="http://yoursite.com/categories/%E6%88%91%E7%9A%84%E9%94%99%E9%A2%98%E5%BA%93/%E7%89%9B%E5%AE%A2%E9%94%99%E9%A2%98%E6%95%B4%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>操作系统（四）</title>
    <link href="http://yoursite.com/2019/08/29/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/29/操作系统（四）/</id>
    <published>2019-08-28T16:34:15.739Z</published>
    <updated>2019-04-10T13:43:01.551Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">Miracles sometimes occur, but one has to work terribly for them. ——C. Weizmann<br><img src="/myimages/15.jpg" alt><blockquote></blockquote></blockquote></p><p>存储器管理</p><a id="more"></a><hr><h1 id="存储器的层次结构"><a href="#存储器的层次结构" class="headerlink" title="存储器的层次结构"></a>存储器的层次结构</h1><p>存储器至少有三级：最高层是CPU寄存器、中间层为主存、最底层是辅存</p><p><img src="/myimages/15存储器层次结构.jpg" alt></p><ol><li><p>可执行存储器：CPU寄存器+主存，操作系统存储管理的范畴</p><pre><code>可执行存储器和辅存的访问机制不同，耗费的时间也不同</code></pre></li><li><p>存储器管理的内容<br>操作系统对可执行存储器进行<strong>分配</strong>、<strong>回收</strong>、在各个存储层次间进行<strong>数据移动</strong></p></li></ol><h2 id="主存储器与寄存器"><a href="#主存储器与寄存器" class="headerlink" title="主存储器与寄存器"></a>主存储器与寄存器</h2><ol><li>主存储器（内存、主存）<br>保存进程运行时的程序和数据<br>由于主存储器的访问速度远低于CPU执行指令的速度，故引入了寄存器和高速缓存</li><li>寄存器<br>访问速度最快，完全能与CPU协调工作</li></ol><h2 id="高速缓存和磁盘缓存"><a href="#高速缓存和磁盘缓存" class="headerlink" title="高速缓存和磁盘缓存"></a>高速缓存和磁盘缓存</h2><ol><li>高速缓存<br>介于内存和寄存器之间，容量（几十KB到几MB）大于寄存器，访问速度快于内存</li><li>磁盘缓存<br>介于内存和磁盘之间，利用内存空间，来暂存磁盘中读出/写入的信息。<br>主存可以看成是辅存的高速缓存</li></ol><hr><h1 id="程序的装入和链接"><a href="#程序的装入和链接" class="headerlink" title="程序的装入和链接"></a>程序的装入和链接</h1><ol><li>用户程序要运行，必须要为之创建进程（分配内存资源、申请并初始化PCB）<br><strong>创建进程的第一步，将程序和数据装入内存</strong></li><li>对用户程序的处理步骤<br>（1）编译：编译程序将用户代码编译成若干个<strong>目标模块</strong><br>（2）链接：链接程序将一组目标模块和所需要的库函数链接在一起，形成一个完整的<strong>装入模块</strong><br>（3）装入：装入程序将<strong>装入模块装入内存</strong></li></ol><hr><h1 id="连续分配方式"><a href="#连续分配方式" class="headerlink" title="连续分配方式"></a>连续分配方式</h1><p>连续分配方式：一个用户程序分配一个连续的内存空间<br>分类：单一连续分配、固定分区分配、动态分区分配、动态重定位分区分配</p><h2 id="单一连续分配"><a href="#单一连续分配" class="headerlink" title="单一连续分配"></a>单一连续分配</h2><ul><li>只能用于单用户、单任务的OS中</li><li>软件简单，硬件要求低，无需采取存储保护措施</li></ul><h2 id="固定分区分配"><a href="#固定分区分配" class="headerlink" title="固定分区分配"></a>固定分区分配</h2><ul><li>将内存空间划分为若干个固定大小的区域，每个分区只装入一个进程</li><li>将分区按大小排队，建立一张分区使用表</li><li>用于60年代的IBM360的MFT操作系统</li></ul><h2 id="动态分区分配"><a href="#动态分区分配" class="headerlink" title="动态分区分配"></a>动态分区分配</h2><ul><li>根据进程的实际需要，动态地为之分配内存空间</li><li>数据结构：空闲分区表、空闲分区链</li><li>动态分区分配算法：首次适应算法、循环首次适应算法、最佳适应算法、最坏适应算法、快速适应算法</li><li>分区分配操作：分配内存、回收内存</li></ul><h2 id="对换"><a href="#对换" class="headerlink" title="对换"></a>对换</h2><p>对换：把内存中暂时不能运行的进程或者暂时不用的程序和数据调出到外存上，腾出内存空间，再把已具备运行条件的进程或所需要的程序和数据调入内存</p><hr><h1 id="基本分页存储管理方式"><a href="#基本分页存储管理方式" class="headerlink" title="基本分页存储管理方式"></a>基本分页存储管理方式</h1><p>离散分配内存方式：允许将一个进程分散装入到不相邻的分区中（提高内存利用率）<br>分类：按离散分配的基本单位，分为分页存储管理方式、分段存储管理方式</p><ol><li>分页存储管理<br>（1）将一个进程的逻辑地址空间分成若干个大小相等的片，称为<strong>页</strong><br>（2）相应地，把内存空间分成与页面大小相同的若干个存储快，称为<strong>（物理）块</strong><br>（3）为进程分配内存时，以块为单位将进程的若干个页分别装入不相邻的物理块中</li><li><p>页表<br>系统为每个进程建立了一张页面映像表，用于找到每个页面对应的物理块（<strong>页表实现从页号到块号的地址映射</strong>）<br><img src="/myimages/15页表.png" alt></p></li><li><p>地址变换机构<br>（1）作用：将逻辑地址中的页号，转换为内存中的物理块号<br>（2）地址变换依靠页表实现：一个页表对应一个地址变换寄存器，实际中寄存器被唯一的一个<strong>页表寄存器PTR</strong>替代<br>（3）运行时，将<strong>页表在内存中的首地址</strong>和<strong>页表长度</strong>保存到页表寄存器<br>（4）平时，这两个参数存放在本进程的PCB中</p></li><li>多级页表</li></ol><hr><h1 id="基本分段存储管理方式"><a href="#基本分段存储管理方式" class="headerlink" title="基本分段存储管理方式"></a>基本分段存储管理方式</h1><h2 id="基本分段存储管理方式-1"><a href="#基本分段存储管理方式-1" class="headerlink" title="基本分段存储管理方式"></a>基本分段存储管理方式</h2><ol><li>目的引入分段存储管理方式主要是为了满足用户/程序员在编程和使用上多方面的要求</li><li>好处<ul><li>方便编程</li><li>信息共享</li><li>信息保护</li><li>动态增长</li><li>动态链接</li></ul></li><li>分段<br>（1）进程的内存空间被划分为若干个段，每个段定义了一组逻辑信息<br>（2）段的逻辑地址（二维）：段号+段内地址<br>（3）分段的实现：编译程序自动分段，装入程序装入这些段，并为每个段赋予一个段号</li><li>段表<br>系统为每个进程建立一张段映射表，记录段的首地址和段的长度（段表用于实现从逻辑段到物理内存区的映射）</li><li>段表寄存器：用于实现逻辑段号到物理地址的变换</li><li><strong>分段与分页的区别</strong><pre><code>相同点：（1）两者都采用离散分配方式       （2）都要通过地址映射机构进行地址变换不同点：（1）页是信息的物理单位——为了实现离散分配            段是信息的逻辑单位——为了满足用户需求       （2）页的大小固定且由系统决定            段的大小由用户程序决定       （3）分页的进程地址空间是一维的，分段的进程地址空间是二维的，标识一个地址需要段号和段内地址       （4）分页系统不容易实现共享和动态链接，分段很容易</code></pre></li></ol><h2 id="段页式存储管理方式"><a href="#段页式存储管理方式" class="headerlink" title="段页式存储管理方式"></a>段页式存储管理方式</h2><p>既具有分段系统的便与实现、分段可共享、可动态连接等优点；<br>又能像分页系统很好地解决内存的外部碎片问题；<br>还可为各个分段离散地分配内存</p><ol><li>原理<br>现将用户程序分成若干个段，再把每个段分成若干个页，并为每一个段富裕一个段名</li><li>地址结构：段号+段内页号+页内地址</li><li>段页式系统获得一条指令/数据的三次访问<br>第一次访问：内存中的段表，得到页表首地址<br>第二次访问：内存中的页表，得到指令/数据的物理地址<strong>（页所在的物理块号+页内地址）</strong><br>第三次访问：内存中的指令/数据的物理地址，取出数据</li></ol><hr><h1 id="虚拟存储器"><a href="#虚拟存储器" class="headerlink" title="虚拟存储器"></a>虚拟存储器</h1><h2 id="虚拟存储器的引入"><a href="#虚拟存储器的引入" class="headerlink" title="虚拟存储器的引入"></a>虚拟存储器的引入</h2><p>之前的存储器管理方式都要求，将一个进程全部装入内存后才能运行<br>针对进程会很大，或者进程数量很多，就需要扩充内存</p><pre><code>1 虚拟内存的原理：基于局部性原理，进程运行之前，没有必要全部装入内存，仅需将当前要运行的少数页面或段先装入内存，其余部分留在磁盘上。这样可以使一个大的进程在较小的内存中运行，从用户角度看，好像实际内存变大了2 虚拟内存：是指具有请求调入和置换功能，能从逻辑上对内存加以扩充的一种存储器系统  实质：不用完整地将进程装入内存后才运行，先装入并执行进程的一部分段/页3 虚拟内存都建立在离散分配的存储管理方式的基础上，因为连续分配方式需要一次性申请足够多的内存空间，就没有意义</code></pre><h2 id="虚拟存储器的实现方法"><a href="#虚拟存储器的实现方法" class="headerlink" title="虚拟存储器的实现方法"></a>虚拟存储器的实现方法</h2><ol><li>分页请求系统<br>基本分页系统+请求分页功能+页面置换功能</li><li>请求分段系统<br>基本分段系统+请求分段功能+分段置换功能</li></ol><h2 id="虚拟存储器的特征"><a href="#虚拟存储器的特征" class="headerlink" title="虚拟存储器的特征"></a>虚拟存储器的特征</h2><ul><li>多次性：进程被分成多次调入内存</li><li>对换性：进程运行中允许换进、换出</li><li>虚拟性</li></ul><hr><h1 id="请求分页存储管理方式"><a href="#请求分页存储管理方式" class="headerlink" title="请求分页存储管理方式"></a>请求分页存储管理方式</h1><p>建立在基本分页基础上，为了支持虚拟存储器而增加了请求调页功能和页面置换功能</p><h2 id="硬件支持"><a href="#硬件支持" class="headerlink" title="硬件支持"></a>硬件支持</h2><ol><li>页表机制</li><li>缺页中断机构</li><li>地址变换机构</li></ol><h2 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h2><ol><li>确定最小物理块数：取决于计算机的硬件结构</li><li>物理块的分配策略<br>（1）固定分配局部置换<br>为每个进程分配固定数目的物理块<br>（2）可变分配全局置换（易实现，空闲物理块由OS管理）<br>先为系统中的每个进程分配一定数目的物理块，OS自身拥有一个空闲物理块队列，缺页时取出物理块分配给该进程<br>（3）可变分配局部置换<br>进程缺页率较高或较低时，能由OS对分配的物理块加以调整</li><li>物理块分配算法<br>（1）平均分配<br>（2）按比例分配<br>（3）考虑优先权分配</li></ol><h2 id="调页策略"><a href="#调页策略" class="headerlink" title="调页策略"></a>调页策略</h2><ol><li>调入页面的时机（发生缺页请求）<br>（1）预调页策略<br>（2）请求调页策略</li><li><p>确定从何处调入页面</p><pre><code>请求分页系统中的外存分为两部分，存放文件的文件区和存放对换页面的对换区。对换区使用的是连续分配方式，文件区采用的离散分配的方式。（1）系统拥有足够的对换区空间：可以全部从对换区调入所需页面，以提髙调页速度。（2）系统缺少足够的对换区空间：凡不会被修改的文件都直接从文件区调入；但对于那些可能被修改的部分，在将它们换出时须调到对换区，以后需要时再从对换区调入。（3）UNIX方式：与进程有关的文件都放在文件区，故未运行过的页面，都应从文件区调入。曾经运行过但又被换出的页面，由于是被放在对换区，因此下次调入时应从对换区调入。进程请求的共享页面若被其他进程调入内存，则无需再从对换区调入。</code></pre></li><li><p>页面调入过程<br>（1）程序要访问的页面不在内存中，向CPU发出缺页中断<br>（2）保留CPU环境，转入中断处理程序<br>（3）中断处理程序通过查找页表，在外存中找到该页<br>（4）若此时内存能容纳新页，则启动磁盘I/O将所缺之页调入内存<br>（5）若此时内存已满，则先按照某种<strong>置换算法</strong>从内存中选出一页准备换出，再调入缺页</p></li></ol><hr><h1 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a>页面置换算法</h1><ul><li>置换算法：选择换出页面的算法</li><li>置换算法的好坏直接影响到系统的性能</li><li>好的置换算法，应具有较低的页面更换频率（把较长时间不会用到的页面先换出）</li></ul><ol><li>最佳置换算法<br>理想化的算法，选择以后永不使用的，或是最长时间内不再被访问的页面</li><li>先进先出（FIFO）置换算法<br>实现简单，但与进程实际运行的规律不相适应</li><li>最近最久未使用（LRU）置换算法<br>性能较好，实现复杂，需要硬件支持（每页配置一个寄存器或栈）</li><li>Clock置换算法（LRU近似算法）<br>（1）为每页设置一位访问位，再将内存中所有页面都通过链接指针链接成一个循环队列<br>（2）当某页被访问时，其访问位被置1<br>（3）访问位是0则换出该页；访问位是1则置为0，给该页驻留内存的机会</li></ol><hr><h1 id="请求分段存储管理方式"><a href="#请求分段存储管理方式" class="headerlink" title="请求分段存储管理方式"></a>请求分段存储管理方式</h1><h2 id="硬件支持-1"><a href="#硬件支持-1" class="headerlink" title="硬件支持"></a>硬件支持</h2><ol><li>段表机制</li><li>缺段中断机构</li><li>地址变换机构</li></ol><h2 id="分段的共享与保护"><a href="#分段的共享与保护" class="headerlink" title="分段的共享与保护"></a>分段的共享与保护</h2><ol><li>共享段表</li><li>共享段的分配与回收</li><li>分段保护</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;Miracles sometimes occur, but one has to work terribly for them. ——C. Weizmann&lt;br&gt;&lt;img src=&quot;/myimages/15.jpg&quot; alt&gt;&lt;blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/p&gt;
&lt;p&gt;存储器管理&lt;/p&gt;
    
    </summary>
    
      <category term="《计算机操作系统》" scheme="http://yoursite.com/categories/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B/"/>
    
    
      <category term="OS" scheme="http://yoursite.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>操作系统（二）</title>
    <link href="http://yoursite.com/2019/08/29/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/29/操作系统（二）/</id>
    <published>2019-08-28T16:34:15.737Z</published>
    <updated>2019-04-10T13:37:33.256Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">The man who has made up his mind to win will never say “impossible”.<br><img src="/myimages/13.jpg" alt><blockquote></blockquote></blockquote></p><p>进程管理</p><a id="more"></a><hr><h1 id="进程的基本概念"><a href="#进程的基本概念" class="headerlink" title="进程的基本概念"></a>进程的基本概念</h1><h2 id="进程的特征"><a href="#进程的特征" class="headerlink" title="进程的特征"></a>进程的特征</h2><ol><li>结构特征<br>通常的程序不能并发执行，为使程序能独立运行，应为之配置一进程控制块（PCB：Process Control Block）<br>进程实体：程序段+数据段+PCB</li><li>动态性<br>进程的实质是进程实体的一次执行过程</li><li>并发性<br>多个进程实体同存于内存中，且能在一段时间内同时运行</li><li>独立性<br>传统OS中，进程实体是一个能独立运行、独立分配资源和独立接收调度的基本单位</li><li>异步性<br>进程按各自独立、不可预知的速度向前推进</li></ol><h2 id="进程的状态"><a href="#进程的状态" class="headerlink" title="进程的状态"></a>进程的状态</h2><p>一、三种基本状态</p><ol><li>就绪状态</li><li>执行状态</li><li>阻塞状态<br>导致阻塞的典型事件：请求IO，申请缓冲空间</li></ol><p>二、挂起状态</p><pre><code>引起挂起状态的原因：-  终端用户的请求（进程处于就绪状态，且暂不接受调度）-  父进程请求-  符合调节的需要-  操作系统的需要</code></pre><p>三、创建状态和终止状态</p><ol><li>创建状态<pre><code>创建进程的两个步骤：（1）为新进程创建PCB，并填写必要的管理信息（2）把该进程转入就绪状态并插入就绪队列之中注意：创建状态的进程还不能被调度，因为虽然进程有了PCB，但是还未进入主存</code></pre></li><li>终止状态<pre><code>进程终止也有两个步骤：（1）等待操作系统进行善后处理，将PCB清零，将PCB空间返还系统（2）终止的进程在操作系统中还保留着记录，一旦其他进程完成了对终止进程记录的信息提取，操作系统正式删除该进程</code></pre></li></ol><p>四、进程状态的转换</p><ol><li>进程的五种基本状态转换</li></ol><p><img src="/myimages/13进程五状态转换.png" alt></p><ol start="2"><li>具有挂起状态的进程状态转换<br><img src="/myimages/13进程七状态转换.png" alt></li></ol><h2 id="进程控制块PCB"><a href="#进程控制块PCB" class="headerlink" title="进程控制块PCB"></a>进程控制块PCB</h2><ol><li>什么是PCB<pre><code>为了描述和控制进程的运行，系统为每一个进程定义了一个数据结构——进程控制块，它是进程实体的一部分</code></pre></li><li>PCB的作用<pre><code>使进程能够独立运行，并与其他进程并发执行PCB是进程存在的唯一标志</code></pre></li><li>PCB中的信息<ul><li>进程标识符<ul><li>内部标识符：操作系统赋予的唯一的数字标识符，方便系统使用</li><li>外部标识符：用户创建，通常由数字和字母组成，用户进程访问该进程时使用</li></ul></li><li>处理机状态：用于保存处理机中各种寄存器中的信息，以便在进程中断后重新执行时，能找到断点的信息</li><li>进程调度信息</li><li>进程控制信息</li></ul></li><li>PCB的组织方式<ul><li>链接方式：把同一状态的PCB，用链接字链接成一个队列</li><li>索引方式：根据进程的状态建立相应的索引表</li></ul></li></ol><hr><h1 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h1><p>进程控制是进程管理中最基本的功能<br>进程控制一般由OS内核中的原语（原子操作，在管态下执行）来实现</p><h2 id="进程的创建"><a href="#进程的创建" class="headerlink" title="进程的创建"></a>进程的创建</h2><ol><li>引起创建进程的事件<ul><li>用户登录</li><li>作业调度</li><li>提供服务</li><li>应用请求</li></ul></li><li>调用进程创建原语Creat()创建进程的步骤<ul><li>申请空白PCB</li><li>为新进程分配资源</li><li>初始化进程控制块</li><li>将新进程插入就绪队列</li></ul></li></ol><h2 id="进程的终止"><a href="#进程的终止" class="headerlink" title="进程的终止"></a>进程的终止</h2><ol><li>引起进程终止的事件<ul><li>正常结束：产生一个中断，通知OS进程已运行完毕</li><li>异常结束：出现错误和故障</li><li>外界干预：进程应外界请求而终止</li></ul></li><li>进程的终止过程<br>OS调用进程终止原语终止进程：<ul><li>根据终止进程的标识符，找到该进程的PCB，读出该进程的状态</li><li>终止该进程的执行</li><li>终止子孙进程</li><li>将被终止进程的资源归还给父进程</li><li>将被终止进程从所在队列中移出</li></ul></li></ol><h2 id="进程的阻塞与唤醒"><a href="#进程的阻塞与唤醒" class="headerlink" title="进程的阻塞与唤醒"></a>进程的阻塞与唤醒</h2><ol><li>进程阻塞<br>进程无法继续执行，于是进程便通过调用阻塞原语block把自己阻塞<br>进程阻塞是进程自身的一种主动行为</li><li>进程唤醒</li></ol><h2 id="进程的挂起与激活"><a href="#进程的挂起与激活" class="headerlink" title="进程的挂起与激活"></a>进程的挂起与激活</h2><hr><h1 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a>进程同步</h1><p>进程同步的任务：对并发执行的诸进程在执行次序上进行协调，使程序的执行具有可再现性</p><ol><li>同步机制——进程互斥地进入自己的临界区<pre><code>临界资源：进程间采用互斥方式对资源进行共享临界区：进程中访问临界资源的那段代码同步机制：进程互斥地进入自己的临界区同步机制四条原则：    空闲让进    忙则等待    有限等待：保证进程在有限时间内能进入到自己的临界区    让权等待：当进程不能进入自己的临界区，应立即释放处理机</code></pre></li><li><p>进程同步工具——信号量机制、管程<br>（1）信号量机制</p><ul><li>整型信号量</li><li>记录型信号量</li><li>AND型信号量</li><li>信号量集</li></ul><p>（2）管程<br> 管程是操作系统的资源管理模块，被请求和释放资源的进程调用</p></li><li>信号量的应用<ul><li>实现进程互斥</li><li>实现前趋关系</li></ul></li></ol><hr><h1 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h1><p>进程通信：进程之间的信息交换<br>低级通信：利用信号量机制实现进程间的数据传输（效率低、通信对用户不透明）<br>高级进程通信：利用操作系统提供的一组通信命令实现进程之间的高效通信</p><ol><li>高级通信机制<ul><li>共享存储器系统</li><li>消息传递系统（应用最广，以格式化报文交换数据）</li><li>管道通信系统（通过共享文件pipe连接读进程和写进程来实现进程间通信）</li></ul></li><li>消息传递通信的实现方法<ul><li>直接通信：发送进程通过OS提供的发送命令，直接把消息发送给目标进程</li><li>间接通信：通过信箱实现通信，信箱可由OS或用户创建<ul><li>私有信箱</li><li>公有信箱</li><li>共享信箱</li></ul></li></ul></li></ol><hr><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><h2 id="线程的基本概念"><a href="#线程的基本概念" class="headerlink" title="线程的基本概念"></a>线程的基本概念</h2><ol><li>线程：系统中独立运行和任务调度的基本单位。</li><li>特点：比进程更小的能独立运行的基本单位，用来提高程序并发执行的程度，使OS具有更好的并发性</li><li>线程与进程的区别<pre><code>（1）调度进程是资源分配的基本单位，执行和调度的基本单位是线程（进程不再作为一个可执行的实体）（2）并发性不仅进程可以并发执行，一个进程中的多个线程也能并发执行（3）拥有资源线程自己（几乎）不拥有系统资源，但可访问其隶书进程的资源（4）系统开销线程的创建、撤销和切换比进程的开销小得多</code></pre></li><li>线程的状态<br>线程和进程一样拥有就绪、执行、阻塞状态</li></ol><h2 id="线程间的同步"><a href="#线程间的同步" class="headerlink" title="线程间的同步"></a>线程间的同步</h2><p>线程同步机制</p><ul><li>互斥锁</li><li>条件变量</li><li>信号量机制</li></ul><h2 id="线程的实现方式"><a href="#线程的实现方式" class="headerlink" title="线程的实现方式"></a>线程的实现方式</h2><ol><li>内核支持线程（KST）<br>（1）无论是系统进程还是用户进程，进程的创建、撤销都是在系统内核的支持下完成的<br>（2）KST方式下，线程的创建、撤销和切换都是在系统内核的支持下完成的，在内核空间中通过线程控制块TCB对线程进行控制<br>（3）线程切换时需要从用户态转到系统态，系统开销较大</li><li>用户级线程（ULT）<br>仅存在于用户空间中，线程的创建、撤销和切换无需系统内核的支持（因此线程切换速度快）</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;The man who has made up his mind to win will never say “impossible”.&lt;br&gt;&lt;img src=&quot;/myimages/13.jpg&quot; alt&gt;&lt;blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/p&gt;
&lt;p&gt;进程管理&lt;/p&gt;
    
    </summary>
    
      <category term="《计算机操作系统》" scheme="http://yoursite.com/categories/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B/"/>
    
    
      <category term="OS" scheme="http://yoursite.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>操作系统（三）</title>
    <link href="http://yoursite.com/2019/08/29/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/29/操作系统（三）/</id>
    <published>2019-08-28T16:34:15.736Z</published>
    <updated>2019-04-10T13:37:55.343Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">Our destiny offers not the cup of despair,but the chalice of opportunity. ——Richard Nixon<br><img src="/myimages/14.jpg" alt><blockquote></blockquote></blockquote></p><p>处理机调度与死锁</p><a id="more"></a><hr><h1 id="处理机调度的层次"><a href="#处理机调度的层次" class="headerlink" title="处理机调度的层次"></a>处理机调度的层次</h1><ul><li>处理机是最重要的计算机资源，在并发的系统中，需要系统能按照某种算法，动态地把处理机分配给就绪队列中的一个进程，使之执行</li><li>调度性能的好坏决定着处理机利用率</li><li>一个批处理作业需要经历三级调度：高级调度、中级调度、低级调度，每一级调度采用不同的调度方式和调度算法</li></ul><h2 id="高级调度-作业调度-长程调度"><a href="#高级调度-作业调度-长程调度" class="headerlink" title="高级调度/作业调度/长程调度"></a>高级调度/作业调度/长程调度</h2><ol><li>功能：把外存上处于后备队列的作业调入内存（批处理系统中，以作业为单位从外存调入内存）</li><li>作业：比程序更为广泛的概念，不仅包含了通常的程序和数据，还应配有一份作业说明书</li><li>作业控制块JCB<br>JCB是作业在系统中存在的标志，控制系统对作业进行管理和调度</li><li>作业调度<br>根据JCB中的信息，从外存的后备队列中选取作业调入内存，并为他们创建进程，分配资源；再将新创建的进程插入就绪队列，准备执行（分时系统中不存在作业调度，因为任务直接进内存处理，以实现及时交互）</li></ol><h2 id="低级调度-进程调度-短程调度"><a href="#低级调度-进程调度-短程调度" class="headerlink" title="低级调度/进程调度/短程调度"></a>低级调度/进程调度/短程调度</h2><ol><li>功能：在内存就绪队列中，选择获得处理机的进程；分派处理机给进程（分派程序）；保存处理机的现场信息（如程序计数器、通用寄存器中的内容）</li><li>进程调度方式<ul><li>非抢占方式</li><li>抢占方式（优先权原则、短作业/进程优先原则、时间片原则）</li></ul></li></ol><h2 id="中级调度"><a href="#中级调度" class="headerlink" title="中级调度"></a>中级调度</h2><ol><li>目的：提高内存利用率和系统吞吐量</li><li>功能：把暂时不能运行的进程从内存调出到外存中挂起，可以运行时，再由中级调度重新调入内存，并将进程插入就绪队列，等待进程调度</li><li><p>程序执行流程<br>（1）作业进入系统<strong>（外存后备队列）</strong>，创建JCB<br>（2）<strong>作业调度</strong></p><ul><li>选作业</li><li>创建进程</li><li>分配资源</li><li>申请并初始化PCB</li></ul><p>（3）进程进入内存<strong>（内存就绪队列）</strong><br>（4）<strong>进程调度</strong></p></li></ol><hr><h1 id="调度算法"><a href="#调度算法" class="headerlink" title="调度算法"></a>调度算法</h1><h2 id="先来先服务调度算法FCFS"><a href="#先来先服务调度算法FCFS" class="headerlink" title="先来先服务调度算法FCFS"></a>先来先服务调度算法FCFS</h2><ol><li>最简单的调度算法，可用于作业调度、进程调度</li><li>有利于长作业（进程）、不利于短作业（进程）</li></ol><h2 id="短作业（进程）优先调度算法SJ-P-F"><a href="#短作业（进程）优先调度算法SJ-P-F" class="headerlink" title="短作业（进程）优先调度算法SJ(P)F"></a>短作业（进程）优先调度算法SJ(P)F</h2><h2 id="高优先权优先调度算法"><a href="#高优先权优先调度算法" class="headerlink" title="高优先权优先调度算法"></a>高优先权优先调度算法</h2><ol><li>可用于批处理系统中作业调度；也可用于实时系统中进程调度</li><li>按中断的方式又分为：非抢占式优先权算法、抢占式优先权算法</li><li>高响应比优先调度算法（动态优先权）<br>照顾了短作业优先算法时，长作业得不到处理机的问题；即随着时间的增长，长作业的优先级越来越高</li></ol><h2 id="基于时间片的轮转调度算法（分时系统）"><a href="#基于时间片的轮转调度算法（分时系统）" class="headerlink" title="基于时间片的轮转调度算法（分时系统）"></a>基于时间片的轮转调度算法（分时系统）</h2><ol><li>优点：能及时响应用户请求</li><li>适用于分时系统的可抢占式的调度算法</li><li>实现方法：由计时器发出时钟中断，引起一次轮转调度</li></ol><h2 id="多级反馈队列调度算法（性能最好）"><a href="#多级反馈队列调度算法（性能最好）" class="headerlink" title="多级反馈队列调度算法（性能最好）"></a>多级反馈队列调度算法（性能最好）</h2><ol><li>特点：事先不知道各种进程所需的执行时间</li><li>实现：<ul><li>在内存中设置多个进程就绪队列，且每个队列的优先级不同，各个队列中的进程执行时间片不同（优先级高，时间片小）；</li><li>一个新进程进入内存后，首先放入第一个队列（优先级最高）的末尾，按FCFS原则排队等待调度；</li><li>进程在第一个队列执行完则撤离系统，未执行完则转入第二个队列的末尾；</li><li>仅当第一个队列空闲时，才调度第二个队列的进程</li></ul></li></ol><hr><h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><ol><li>死锁：多个进程在运行过程中因争夺资源而陷入僵局</li><li>死锁原因：（1）竞争资源（2）进程间推进顺序非法</li><li>处理死锁的基本方法：<br>（1）预防死锁：设置限制条件<br>（2）避免死锁：在资源动态分配过程中，以某种方法防止系统进入不安全状态<br>（3）检测死锁：允许死锁，检测并清除之<br>（4）解除死锁：检测死锁并使之解脱</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;Our destiny offers not the cup of despair,but the chalice of opportunity. ——Richard Nixon&lt;br&gt;&lt;img src=&quot;/myimages/14.jpg&quot; alt&gt;&lt;blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/p&gt;
&lt;p&gt;处理机调度与死锁&lt;/p&gt;
    
    </summary>
    
      <category term="《计算机操作系统》" scheme="http://yoursite.com/categories/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B/"/>
    
    
      <category term="OS" scheme="http://yoursite.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>操作系统（一）</title>
    <link href="http://yoursite.com/2019/08/29/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/29/操作系统（一）/</id>
    <published>2019-08-28T16:34:15.734Z</published>
    <updated>2019-04-10T13:35:28.093Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">You have to believe in yourself. That’s the secret of success.     ——Charles Chaplin<br><img src="/myimages/12.jpg" alt><blockquote></blockquote></blockquote></p><p>操作系统概述</p><a id="more"></a><hr><h1 id="为什么学OS"><a href="#为什么学OS" class="headerlink" title="为什么学OS"></a>为什么学OS</h1><ul><li>OS是配置在计算机硬件上的第一层软件，大量应用软件都依赖于操作系统的支持、取得它的服务</li><li>OS的有效性：提高系统资源的利用率，提高系统的吞吐量</li><li>OS的方便性：OS使得计算机更容易使用</li></ul><hr><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="OS的作用"><a href="#OS的作用" class="headerlink" title="OS的作用"></a>OS的作用</h2><ol><li>管理计算机系统资源<ul><li>处理器管理</li><li>存储器管理</li><li>IO设备管理</li><li>文件管理</li></ul></li><li><p>作为用户与计算机硬件系统之间的接口<br>（1）使用计算机的三种方式：</p><ul><li>命令方式（通过键盘输入取得操作系统的服务，控制用户程序的运行）</li><li>系统调用方式（通过系统调用与操作系统通信，取得它的服务）</li><li>图形、窗口方式</li></ul><p>（2）操作系统与用户之间的接口</p><ul><li>用户接口</li><li>程序接口</li></ul></li><li><p>实现了对计算机资源的抽象</p></li></ol><h2 id="OS的发展过程"><a href="#OS的发展过程" class="headerlink" title="OS的发展过程"></a>OS的发展过程</h2><p>一、无操作系统</p><ol><li>人工操作方式（人机矛盾）<br>缺点：用户独占全机，CPU等待人工操作</li><li>脱机输入/输出方式</li></ol><p>二、单道批处理系统<br>主要特征：自动型、顺序性、单道性</p><p>三、多道批处理系统<br>优点：资源利用率高、系统吞吐量大<br>缺点：平均周转时间长、无交互能力</p><p>四、分时系统（CTSS）</p><ol><li>能将一台计算机提供给多个用户同时使用</li><li>解决的问题：人机交互、共享主机、便于用户上机</li><li>实现人机交互的关键：作业直接进入内存、每个作业只运行一个时间片</li><li>分时系统的特征：多路性、独立性、及时性、交互性</li></ol><p>五、实时系统<br>实时系统的特征：多路性、独立性、及时性、交互性、可靠性</p><p>六、微机操作系统</p><ol><li>单用户单任务操作系统<ul><li>CP/M</li><li>MS-DOS</li></ul></li><li>单用户多任务操作系统<ul><li>windows</li></ul></li><li>多用户多任务操作系统<ul><li>UNIX</li><li>Solaris</li><li>Linux</li></ul></li></ol><h2 id="操作系统的特性"><a href="#操作系统的特性" class="headerlink" title="操作系统的特性"></a>操作系统的特性</h2><ul><li><strong>并发性</strong></li><li><strong>共享性</strong></li><li>虚拟技术</li><li>异步性</li></ul><p>一、并发性</p><ol><li>并行与并发<br>（1）并行：两个或多个事件同时发生<br>（2）并发：两个或多个事件在同一时间段内发生，宏观上有多个程序同时进行，微观上这些程序只是分时交替执行（在多核处理器中，将多个并发的程序分配到不同的处理机上，就能实现并行执行）</li><li>进程与线程<br>为使多个程序并发执行，系统要为每个程序建立进程。<br>（1）进程：系统中能独立运行，并作为资源分配的基本单位。多个进程之间可以并发执行和交换信息<br>（2）线程：进程中可以包含多个线程，共同拥有进程的资源。进程是资源分配的基本单位，线程是独立运行和调度的基本单位</li></ol><p>二、共享性（资源共享、资源复用）</p><ol><li>互斥共享<br>某些资源虽然可提供给多个进程/线程使用，但规定一段时间内只允许一个进程/线程访问该资源</li><li>同时访问<br>宏观上的“同时”，微观上分时交替</li></ol><p>三、虚拟技术</p><ol><li>时分复用技术<ul><li>虚拟处理机技术</li><li>虚拟设备技术</li></ul></li><li>空分复用技术<ul><li>虚拟磁盘技术</li><li>虚拟存储器技术</li></ul></li></ol><p>四、异步性<br>进程以不可预知的速度向前推进，此即进程的异步性</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;You have to believe in yourself. That’s the secret of success.     ——Charles Chaplin&lt;br&gt;&lt;img src=&quot;/myimages/12.jpg&quot; alt&gt;&lt;blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/p&gt;
&lt;p&gt;操作系统概述&lt;/p&gt;
    
    </summary>
    
      <category term="《计算机操作系统》" scheme="http://yoursite.com/categories/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B/"/>
    
    
      <category term="OS" scheme="http://yoursite.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>常用Linux命令</title>
    <link href="http://yoursite.com/2019/08/29/%E5%B8%B8%E7%94%A8Linux%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2019/08/29/常用Linux命令/</id>
    <published>2019-08-28T16:34:15.720Z</published>
    <updated>2019-04-10T13:55:11.321Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">All that you do, do with your might; things done by halves are never done right.——R.H. Stoddard<br><img src="/myimages/17.jpg" alt></blockquote></p><a id="more"></a><hr><pre><code>1. 查看进程              ps -fu [用户名]2. 杀进程                kill -9 [进程号]3. 查看一个程序是否运行    ps –ef|grep tomcat （查看所有有关tomcat的进程）   显示所有用户所有终端的所有程序  ps -aux4. 清缓存                rm -rf Catalina （提示：一定要在tomcat的work目录下执行此命令）5. 重启项目              ./startup.sh6. 查看日志              tail -f catalina.out7. 查找日志记录          vi + catalina8. 当前工作目录的绝对路径    pwd9. 创建目录                mkdir newfolder10. 删除空目录            rmdir deleteEmptyFolder11. 递归删除目录中所有内容    rm -rf deleteFile12. 查看文件，包含隐藏文件    ls -al13. 复制文件                cp source dest14. 递归复制整个文件夹        cp -r sourceFolder targetFolder15. 远程拷贝                scp sourecFile romoteUserName@remoteIp:remoteAddr16. 移动文件                mv /temp/movefile /targetFolder17. 重命令                mv oldNameFile newNameFile18. 压缩文件                tar -czf test.tar.gz /test1 /test219. 列出压缩文件列表        tar -tzf test.tar.gz20. 解压文件                tar -xvzf test.tar.gz21. 查看文件头10行          head -n 10 example.txt22. 查看文件尾10行          tail -n 10 example.txt23. 查看日志类型文件        tail -f exmaple.log    （这个命令会自动显示新增内容，屏幕只显示10行内容的（可设置））24. 使用管理员身份删除文件    sudo rm a.txt25. 修改文件权限            chmod 777 file.java （file.java的权限-rwxrwxrwx，r表示读、w表示写、x表示可执行）26. 查找文件    find / -name filename.txt 根据名称查找/目录下的filename.txt文件。    find . -name &quot;*.xml&quot; 递归查找所有的xml文件    find . -name &quot;*.xml&quot; |xargs grep &quot;hello world&quot; 递归查找所有文件内容中包含hello world的xml文件    grep -H &apos;spring&apos; *.xml 查找所有的包含spring的xml文件    find ./ -size 0 | xargs rm -f &amp;amp; 删除文件大小为零的文件    ls -l | grep &apos;.jar&apos; 查找当前目录中的所有jar文件    grep &apos;test&apos; d* 显示所有以d开头的文件中包含test的行。    grep &apos;test&apos; aa bb cc 显示在aa，bb，cc文件中匹配test的行。    grep &apos;[a-z]\{5\}&apos; aa 显示所有包含每个字符串至少有5个连续小写字符的字符串的行。27. 切换用户                su -username28. 查看端口占用情况        netstat -tln | grep 8080 查看端口8080的使用情况29. 查看端口属于哪个程序    lsof -i :808030. 网络检测                ping www.just-ping.com31. 远程登录                ssh userName@ip32. 打印信息                echo $JAVA_HOME 打印java home环境变量的值</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;All that you do, do with your might; things done by halves are never done right.——R.H. Stoddard&lt;br&gt;&lt;img src=&quot;/myimages/17.jpg&quot; alt&gt;&lt;/blockquote&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux命令" scheme="http://yoursite.com/tags/Linux%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>TWHomework——生成迷宫</title>
    <link href="http://yoursite.com/2019/08/29/TWHomework%E2%80%94%E2%80%94%E7%94%9F%E6%88%90%E8%BF%B7%E5%AE%AB/"/>
    <id>http://yoursite.com/2019/08/29/TWHomework——生成迷宫/</id>
    <published>2019-08-28T16:34:15.719Z</published>
    <updated>2019-04-10T14:07:39.101Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">The best hearts are always the bravest.<br><img src="/myimages/19.jpg" alt></blockquote></p><a id="more"></a><hr><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><ol><li>问题</li></ol><p>用计算机生成迷宫是一个很有趣的任务。我们可以用道路网格(Road Grid) 来表示迷宫的道路，那么3 x 3的道路网格（图-1 左）可以对应一个7 x 7的渲染网格(Render Grid)——图-1 右的方式（迷宫的墙是灰色的，道路是白色的）：<br><img src="/myimages/19TWHomework1.png" alt></p><p>如果我们将迷宫道路网格两个相邻的cell连通，则可以打通道路。如图-2所示：<br><img src="/myimages/19TWHomework2.png" alt></p><p>连通 道路网格 有如下的约束条件：<br>● 每一个 cell 只能够直接与相邻正南、正北、正东、正西的 cell 连通。不能够和其他的 cell 连通。<br>● 两个 cell 之间的连通一定是双向的。即 cell(0,0) 和 cell(1,0) 连通等价于 cell(1,0) 和 cell(0,0) 的连通。</p><ol start="2"><li>要求1：将迷宫渲染为字符串</li></ol><p>现在我们希望你书写程序，将给定迷宫的道路网格，渲染为字符串输出。例如，其使用方式如下（伪代码，仅做演示，实际实现时请应用实际语言的编程风格）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Maze maze = MazeFactory.Create(command);</span><br><span class="line">String mazeText = maze.Render();</span><br></pre></td></tr></table></figure></p><p>其中 command 是一个字符串。它的定义如下：<br>● 第一行是迷宫道路网格的尺寸。例如 3 x 3 的迷宫为 3 3 ，而 5 x 4 的迷宫为 5 4 （5 行 4 列） 。<br>● 第二行是迷宫道路网格的连通性定义。如果 cell(0,1) 和 cell(0,2) 是连通的，则表示为：<br>0,1 0,2 ，多个连通以分号 ; 隔开。<br><img src="/myimages/19TWHomework3.png" alt></p><ol start="3"><li>要求2：检查输入的有效性</li></ol><p>在处理输入的时候需要检查输入的有效性。需要检查的有效性包括如下的几个方面：<br>● 无效的数字：输入的字符串无法正确的转换为数字。此时，该函数的输出为字符串 ”Invalid<br>number format . ”<br>● 数字超出预定范围：数字超出了允许的范围，例如为负数等。此时，该函数的输出为字符串<br>”Number out of range . ”<br>● 格式错误：输入命令的格式不符合约定。此时，该函数的输出为字符串 ”Incorrect command<br>format . ”<br>● 连通性错误：如果两个网格无法连通，则属于这种错误。此时，该函数的输出为字符串 ”Maze<br>format error.”<br>当多个问题同时出现时，报告其中一个错误即可。</p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>1、观察给定用例的输入输出可得出以下规律：</p><p>（1）输入的第一行字符串“m n”用来确定迷宫的大小（scale），行数row=m<em>2+1，列数column=n</em>2<br>（2）输入的第二行字符串用来确定哪两个网格之间连通（path），并可以通过每一组网格的坐标及其之间的关系确定连通节点在新的迷宫中的位置</p><p>2、迷宫由两个参数确定<br>（1）int[][] mazeArray<br>首先由第一行字符串确定迷宫大小，此二维数组的每一个元素为mazeArray[i][j]，若i或者j其中有一个偶数，则将该元素暂时赋值为0（代表墙W），其余位置确定赋1（代表初始通路R）；<br>后面需要根据输入字符串的第二行确定其他通路，修改此代表迷宫的二维数组mazeArray，将原本暂时赋的0改为1。</p><p>（2）int[][] pathArray<br>将输入字符串第二行的处理为另一个二维数组pathArray，第一维度代表对字符串分组后的下标，第二维度代表每一个分组中的4个数字；</p><p>例如0,1 0,2;0,0 1,0可以被分为两组，其中第一组中的元素分别为pathArray[0][0]=0，pathArray[0][1]=1，pathArray[0][2]=0，pathArray[0][3]=2</p><p>3、确定连通节点在迷宫数组中的坐标<br>经过初始化的迷宫有了，怎么根据pathArray[][]找到int[][] mazeArray中连通节点的坐标呢？规律如下：<br>假设输入一组字符串“0,1 0,2”，根据在迷宫中的对应位置分别记为“x1,y1 x2,y2”，那么有：<br>（1）x1和x2、y1和y2必有一对相等，且不相等的一对数字必定相差1；<br>（2）连通节点的坐标mazeArray[a][b]：若x1=x2，a=x1<em>2+1,b=max(y1,y2)</em>2；若y1=y2，a=max(x1,x2)<em>2+1,b=y1</em>2<br>由此找到了其余连通节点在mazeArray中的坐标，将该位置上的元素重新置为1。</p><hr><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="Test-java"><a href="#Test-java" class="headerlink" title="Test.java"></a>Test.java</h2><p><img src="/myimages/19TWCode_test.png" alt></p><h2 id="MazeFactory-java"><a href="#MazeFactory-java" class="headerlink" title="MazeFactory.java"></a>MazeFactory.java</h2><p><img src="/myimages/19TW_MazeFactory1.png" alt><br><img src="/myimages/19TW_MazeFactory2.png" alt><br><img src="/myimages/19TW_MazeFactory3.png" alt><br><img src="/myimages/19TW_MazeFactory4.png" alt><br><img src="/myimages/19TW_MazeFactory5.png" alt><br><img src="/myimages/19TW_MazeFactory6.png" alt></p><h2 id="Maze-java"><a href="#Maze-java" class="headerlink" title="Maze.java"></a>Maze.java</h2><p><img src="/myimages/19TWCode_Maze1.png" alt><br><img src="/myimages/19TWCode_Maze2.png" alt><br><img src="/myimages/19TWCode_Maze3.png" alt></p><h2 id="Const-java"><a href="#Const-java" class="headerlink" title="Const.java"></a>Const.java</h2><p><img src="/myimages/19TWCode_Constant.png" alt></p><hr><h1 id="代码说明"><a href="#代码说明" class="headerlink" title="代码说明"></a>代码说明</h1><p>总体分为四个类<br>（1）Test.java——主函数所在类<br>键盘输入两行字符串，调用下面两个方法分别用来创建Maze对象，生成迷宫字符串mazeText。<br>Scanner scanner = new Scanner(System.in);<br>Maze maze = MazeFactory.createMaze(scaleInput,pathInput);<br>String mazeText =maze.render();</p><p>（2）MazeFactor.java——迷宫工厂类<br>分为两个模块<br><strong>创建Maze模块：</strong><br>createMaze方法中调用验证模块，对输入字符串进行处理，构造两个二维数组int[][] mazeArray,int[][] pathArray，并将此作为maze方法的参数传入Maze maze = new Maze(mazeArray,pathArray)，返回Maze对象<br><strong>验证模块：</strong><br>由于第一行和第二行的输入格式内容不同，验证规则也不同，所以分为两个部分。同时，对每一行输入进行4种验证：验证格式错误、验证非连通性、验证无效数字、验证数字超出预定范围</p><pre><code>验证格式错误：用字符串匹配正则表达式实现，两行输入都应当把格式错误作为第一个验证方法验证非连通性：对于第一行，非连通性指输入为为“0 0” 或者“1 1”或者“0 1”或者“1 0”，因为这四种情况没有连通性可言；对于第二行，非连通性指“x1,y1 x2,y2”中，x1和x2、y1和y2必有一对相等，且不相等的一对数字必定相差1验证无效数字：题目中的解释为“输入的字符串无法正确的转换为数字”，个人认为无效数字也属于格式错误的一种，例如“x1,y1 x2,y2”中有一个字母，因而无法转换为数字，但是要求每一项数字也是格式正确的一方面验证数字超出预定范围：判断“x1,y1 x2,y2”中每一个数字都大于0，并且小于对应的行和列</code></pre><p>（3）Maze.java——迷宫类</p><pre><code>创建StringBuilder容器，准备将处理后的迷宫二维数组渲染为迷宫字符串mazeText输出；比较二维数组pathArray[][]中的元素，用来确定迷宫mazeArray[][]中通路的坐标，即要把哪里重置为1遍历迷宫二维数组，将处理后的迷宫二维数组渲染为迷宫字符串mazeText输出</code></pre><p>（4）Constant.java——常量类<br>包含了其他类中用到的常量：</p><pre><code>public static final String INCORRECT_COMMAND = &quot;Incorrect command format.&quot;;public static final String INVALID_NUMBER = &quot;Invalid number format.&quot;;public static final String OUT_OF_RANGE = &quot;Number out of range.&quot;;public static final String SCALE_FORMAT_OK = &quot;scaleformat is ok&quot;;public static final String PATH_FORMAT_OK = &quot;pathformat is ok&quot;;public static final String SCALE_REGEX1 = &quot;^-?\\d+\\s-?\\d+$&quot;;public static final String SCALE_REGEX2 = &quot;-?\\d+&quot;;public static final String PATH_REGEX1 = &quot;^(-?\\d+,-?\\d+\\s-?\\d+,-?\\d+;)*(-?\\d+,-?\\d+\\s-?\\d+,-?\\d+)$&quot;;public static final String PATH_REGEX2 = &quot;^\\[(-?\\d,\\s){3}-?\\d\\]$&quot;;</code></pre><hr><h1 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h1><p><strong>注意：</strong><br>（1）下面用例中，第一行、第二行为输入，下面即为输出；紧接着是另一组的输入……<br>（2）运行主程序进行测试，首先需要键盘录入两行字符串作为输入，回车即可得到测试输出结果（迷宫或者验证错误信息提示）。</p><p><strong>正常输出用例：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">2 3</span><br><span class="line">0,0 0,1;0,1 1,1</span><br><span class="line">[W] [W] [W] [W] [W] [W] [W]</span><br><span class="line">[W] [R] [R] [R] [W] [R] [W]</span><br><span class="line">[W] [W] [W] [R] [W] [W] [W]</span><br><span class="line">[W] [R] [W] [R] [W] [R] [W]</span><br><span class="line">[W] [W] [W] [W] [W] [W] [W]</span><br><span class="line">1 3</span><br><span class="line">0,1 0,2</span><br><span class="line">[W] [W] [W] [W] [W] [W] [W]</span><br><span class="line">[W] [R] [W] [R] [R] [R] [W]</span><br><span class="line">[W] [W] [W] [W] [W] [W] [W]</span><br><span class="line">3 1</span><br><span class="line">0,0 1,0</span><br><span class="line">[W] [W] [W]</span><br><span class="line">[W] [R] [W]</span><br><span class="line">[W] [R] [W]</span><br><span class="line">[W] [R] [W]</span><br><span class="line">[W] [W] [W]</span><br><span class="line">[W] [R] [W]</span><br><span class="line">[W] [W] [W]</span><br><span class="line">3 3</span><br><span class="line">0,1 0,2;0,0 1,0;0,1 1,1;0,2 1,2;1,0 1,1;1,1 1,2;1,1 2,1;1,2 2,2;2,0 2,1</span><br><span class="line">[W] [W] [W] [W] [W] [W] [W]</span><br><span class="line">[W] [R] [W] [R] [R] [R] [W]</span><br><span class="line">[W] [R] [W] [R] [W] [R] [W]</span><br><span class="line">[W] [R] [R] [R] [R] [R] [W]</span><br><span class="line">[W] [W] [W] [R] [W] [R] [W]</span><br><span class="line">[W] [R] [R] [R] [W] [R] [W]</span><br><span class="line">[W] [W] [W] [W] [W] [W] [W]</span><br></pre></td></tr></table></figure></p><p><strong>每一种错误的测试用例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">23</span><br><span class="line">0,0 0,1;0,1 1,1</span><br><span class="line">Incorrect command format.</span><br><span class="line"></span><br><span class="line">0,0 0,1;0,1 1,1</span><br><span class="line">Incorrect command format.</span><br><span class="line">2,3</span><br><span class="line">0,0 0,1;0,1 1,1</span><br><span class="line">Incorrect command format.</span><br><span class="line">2 a</span><br><span class="line">0,0 0,1;0,1 1,1</span><br><span class="line">Incorrect command format.</span><br><span class="line">2a</span><br><span class="line">0,0 0,1;0,1 1,1</span><br><span class="line">Incorrect command format.</span><br><span class="line">2,a</span><br><span class="line">0,0 0,1;0,1 1,1</span><br><span class="line">Incorrect command format.</span><br><span class="line">0 0</span><br><span class="line">0,0 0,1;0,1 1,1</span><br><span class="line">Maze format error.</span><br><span class="line">0 1</span><br><span class="line">0,0 0,1;0,1 1,1</span><br><span class="line">Maze format error.</span><br><span class="line">1 0</span><br><span class="line">0,0 0,1;0,1 1,1</span><br><span class="line">Maze format error.</span><br><span class="line">1 1</span><br><span class="line">0,0 0,1;0,1 1,1</span><br><span class="line">Maze format error.</span><br><span class="line">-2 3</span><br><span class="line">0,0 0,1;0,1 1,1</span><br><span class="line">Number out of range.</span><br><span class="line">2 3</span><br><span class="line">a,0 0,1;0,1 1,1</span><br><span class="line">Incorrect command format.</span><br><span class="line">2 3</span><br><span class="line">0,0,0,1;0,1 1,1</span><br><span class="line">Incorrect command format.</span><br><span class="line">2 3</span><br><span class="line">0,0;0,1;0,1 1,1</span><br><span class="line">Incorrect command format.</span><br><span class="line">2 3</span><br><span class="line"></span><br><span class="line">Incorrect command format.</span><br><span class="line">2 3</span><br><span class="line">0,0</span><br><span class="line">Incorrect command format.</span><br><span class="line">2 3</span><br><span class="line">a,0 0,1;0,1 1,1</span><br><span class="line">Incorrect command format.</span><br><span class="line">2 3</span><br><span class="line">0,0 0,-1;0,1 1,1</span><br><span class="line">Number out of range.</span><br><span class="line">2 3</span><br><span class="line">0,0 0,2;0,1 1,1</span><br><span class="line">Maze format error.</span><br></pre></td></tr></table></figure><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><ol><li>找到输入字符串和输出迷宫的规律之后，就马上着手写了，一个Homework类从头写到尾，运行该主程序直接按照题目给定的输入得到了给定的输出。但其中存在很多问题，没有加验证、没有将各个功能模块分类、代码不是很简洁、存在一些细节上的问题…</li><li>后面加了验证，并将功能实现分为了4个类，进行了一些代码细节的优化。这个过程中的一些问题如下</li><li><p>输入格式的问题</p><pre><code>最开始以为输入字符串是一行，所以将输入作为用一个字符串变量标记，第一行和第二行的中间用&quot;\r\n&quot;隔开问题：但是这样做没有考虑到后面字符串的格式验证，因为第一行和第二行的验证规则是不同的，如果不分开用不同的变量标记，比较难处理解决：将输入作为两行，用两个字符串变量标记</code></pre></li><li><p>对第一行输入的处理问题</p><pre><code>最开始没有对&quot;3 3&quot;进行进一步切割，所以在取两个数字的时候使用了 int | String.charAt(index)-48 得到了int类型的数字问题：这样做使用题目给定的测试用例可以得到正确的输出，但是当&quot;m n&quot;中m或n有一个超过两位数字，对char类型-48就不能得到正确的int类型的数值解决：将&quot;3 3&quot;进一步用&quot;\\s&quot;切割，得到String[]数组，对数组中的每一个String元素用Integer.parseInt(String元素)就能得到正确的int类型的数值</code></pre></li><li><p>输入没有进行键盘录入</p><pre><code>问题：最开始将输入写成固定的了，不方便进行测试没有进行键盘录入解决：在Test类（主类）中加上了扫描器进行键盘录入</code></pre></li><li><p>字符串常量池</p><pre><code>问题：最开始把所有的字符串直接在功能实现类中写着，看起来不够简洁解决：创建了一个Constant类，把用到的字符串常量都定义在里面作为静态常量被调用。包括用到的错误信息展示、flag、正则表达式</code></pre></li><li>Maze类的属性的确定<pre><code>问题：最开始对迷宫对象的属性不知道怎么定义，即要用哪几个变量唯一确定一个迷宫。解决：（1）private int[][] mazeArray;//初始迷宫二维数组     private int[][] pathArray;//用来找通路坐标    （2）根据思路中提到的规律，若把墙&quot;[W]&quot;看作int类型的0，通路&quot;[R]&quot;看作int类型的1，则整个迷宫就是一个二维数组 int[][] mazeArray    （3）按照规律对二维数组mazeArray进行初始化，得到一部分的通路，其余的通路要由输入的第二行字符串按照相应的规律确定，        此时就需要对第二行字符串切割后把所有数字存入另一个二维数组int[][] pathArray，对pathArray中的元素进行比较后得到通路[R]在迷宫mazeArray中的坐标        重置该坐标的元素为1，就能得到最终的迷宫数组了</code></pre></li><li><p>验证第一行输入过程中的问题</p><pre><code>问题1：4种验证方法的前后顺序需要考虑。不然会引起前面的验证方法把后面的几种错误全都给拦截了的问题（当然这还与验证的规则——正则表达式有关）解决1：格式验证一定在第一个；其次是连通性验证；再是无效数字验证；最后是超范围验证。问题2：格式验证的正则表达式书写。这个正则必须只验证格式，把后面几种错误都放过去。最开始写的时候没有加负号&quot;-&quot;，结果把超范围错误的负数错误给拦截到格式错误中了。      包括在第二行输入字符串格式验证的正则表达式中，也出现了同样的问题。解决2：在正则中加上了对于负号的验证。问题3：关于无效数字的验证。题目中对于无效数字的定义为：不能转换为正确的数字。个人认为无效数字应该也属于格式错误的一种。      例如，因为pathArray中有一个元素是字母不能正确转为数字，那么这种输入本身的格式就不对。解决3：在无效数字验证方法中，使用和格式验证同样的正则做了匹配验证问题4：对于第一行输入非连通性的定义解决4：个人认为scaleInput为“0 0” 或者“1 1”或者“0 1”或者“1 0”，这四种情况下没有连通性可言。</code></pre></li><li><p>验证第二行输入过程中的问题</p><pre><code>问题1：4种验证方法的前后顺序需要考虑。不然会引起前面的验证方法把后面的几种错误全都给拦截了的问题（当然这还与验证的规则——正则表达式有关）解决1：格式验证一定在第一个；其次是无效数字验证；再是超范围验证；最后是连通性验证。与第一行顺序稍有不同，因为第二行的连通性定义不同：假设有一组输入为&quot;x1,y1 x2,y2&quot;，x1和x2、y1和y2必有一对相等，且不相等的一对数字必定相差1。问题2：超范围验证的时候，最开始只把x1,y1,x2,y2和row、column进行了比较，没有和0进行比较，因为负数也是超范围的一种解决2：分别把x1,y1,x2,y2和0进行了比较。</code></pre></li></ol><h2 id="需要改进的地方"><a href="#需要改进的地方" class="headerlink" title="需要改进的地方"></a>需要改进的地方</h2><ol><li>验证部分写在了工厂类MazeFactory中，是不是可以把验证单独作为一个类</li><li>验证第二行字符串的时候，需要拿到字符串中的每一个数字，于是又在验证模块中把字符串重新处理为二维数组int[][] pathArray，但是这一步在同一类中的createMaze(String scaleInput,String pathInput)方法中已经实现</li><li>写验证模块判断条件比较长，例如验证第二行字符串超范围错误的条件用了很多个或”||”</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;The best hearts are always the bravest.&lt;br&gt;&lt;img src=&quot;/myimages/19.jpg&quot; alt&gt;&lt;/blockquote&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="笔试" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AF%95/"/>
    
    
      <category term="Maze" scheme="http://yoursite.com/tags/Maze/"/>
    
  </entry>
  
</feed>
